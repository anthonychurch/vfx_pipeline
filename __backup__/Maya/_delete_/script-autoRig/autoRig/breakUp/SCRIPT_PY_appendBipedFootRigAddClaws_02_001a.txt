import maya.cmds
import random
import math

#### START - Common Methods ###############################################################################################################################################################################

#### START - UI Methods     ###############################################################################################################################################################################
def deleteWindow( windowName ):
	exist = maya.cmds.window( windowName, exists=True )
	if(exist == 1):
		maya.cmds.deleteUI(windowName, window=True)
#### END   - UI Methods     ###############################################################################################################################################################################


def getSuffix(name,tail):
	newName = name[len(name)-tail:len(name)]	
	return newName

def createIKhandles(prefix,limbType,type,startJoint,endJoint,pvCtrl,curve,grp):
	ikh = prefix + limbType + 'ikHandle'
	if(type != 'ikSplineSolver'):
		h = maya.cmds.ikHandle(n = ikh, sj = startJoint, ee = endJoint, sol = type)
		print('h = ' + str(h))
		if(type == 'ikRPsolver'):
			maya.cmds.poleVectorConstraint( pvCtrl, ikh )
	else:
		h = maya.cmds.ikHandle(n = ikh, sj = startJoint, ee = endJoint, sol = type, ccv = False, pcv = False, c = curve)
		print('h = ' + str(h))
		print('createIKhandles :: grp = ' + str(grp) )
		maya.cmds.parent(h[0],grp)
				
	return h

def checkAttrExist(obj,attr,type,min,max,default,keyable,replace):
	attrExist = maya.cmds.attributeQuery(attr, node=obj, exists=True)
	print('checkAttrExist :: attrExist = ' + str(attrExist) + ' : attr = ' + str(attr))
	newAttr = ''
	if(attrExist == False):
		#maya.cmds.deleteAttr(obj, at=attr)
		
		newAttr = maya.cmds.addAttr(obj, longName=attr, at=type, defaultValue=default, minValue=min, maxValue=max )
		print('checkAttrExist :: newAttr = ' + str(newAttr))

		if(keyable == True):
			maya.cmds.setAttr(obj + '.' + attr, e=True, keyable=True)
		else:
			maya.cmds.setAttr(obj + '.' + attr, e=True, keyable=False, channelBox=True)

		print('checkAttrExist :: newAttr = ' + str(newAttr) )
	else:
		if(replace == True):
			maya.cmds.deleteAttr(obj, at=attr)
			newAttr = maya.cmds.addAttr(obj, longName=attr, at=type, defaultValue=default, minValue=min, maxValue=max )

			if(keyable == True):
				maya.cmds.setAttr(obj + '.' + attr, e=True, keyable=True)
			else:
				maya.cmds.setAttr(obj + '.' + attr, e=True, keyable=False, channelBox=True)

			print('checkAttrExist :: newAttr = ' + str(newAttr) )

	return (attrExist,newAttr)

def getPitchAxis(aimAxis,upAxis):
	pitchAxis = 'x'
	if(aimAxis == 'x' and upAxis == 'z'):
		pitchAxis = 'y'
	elif(aimAxis == 'x' and upAxis == 'y'): 
		pitchAxis = 'z'
	
	return pitchAxis


def getVector(axis):
	#axis = axis.lower()
	returnVector = [1,0,0]
	if(axis == 'y'):
		returnVector[0] = 0
		returnVector[1] = 1
		returnVector[2] = 0
	elif(axis == 'z'):
		returnVector[0] = 0
		returnVector[1] = 0
		returnVector[2] = 1

	return returnVector

def addClaw(jointArray,rollLoc,jointAimAxis,jointUpAxis,ctrl):
	returnArray = []

	aimVect = getVector(jointAimAxis)
	upVect = getVector(jointUpAxis)
	pitchAxis = getPitchAxis(jointAimAxis,jointUpAxis)

	getBranchNumber = getSuffix(jointArray[1],1)

	#CREATE INITIAL BASE LOCATOR FIRST LOCATOR THAT IS PARENTED ON THE ANKLE JOINT AND IS AIMED AT THE TOE
	name = jointArray[0] + '_base' + getBranchNumber
	createLocator = maya.cmds.spaceLocator(n=name, p=(0,0,0))[0]
	whichJoint = jointArray[0]
	constainLocator = maya.cmds.parentConstraint(whichJoint, createLocator, weight=1 )
	maya.cmds.delete(constainLocator)
	maya.cmds.parent(createLocator,rollLoc,a=True)
	ac = maya.cmds.aimConstraint( jointArray[1],createLocator,offset=(0,0,0), weight=1, aimVector=(aimVect[0],aimVect[1],aimVect[2]), upVector=(upVect[0],upVect[1],upVect[2]), worldUpType='vector', worldUpVector=(0,1,0))
	#maya.cmds.aimConstraint( 'locator2','locator1',offset=(0,0,0), weight=1, aimVector=(0,1,0), upVector=(0,0,1), worldUpType='vector', worldUpVector=(0,1,0))
	maya.cmds.delete(ac)
	returnArray.append(createLocator)
	previousLocator = createLocator

	#CREATE SECONDARY LOCATOR PARENT TO THE FIRST LOCATOR. THIS WILL ACT AS A ROLL AND PITCH  LOCATOR
	#CREATE ATTRIBUTES
	name = jointArray[0] + '_LOC' + '_B' + getBranchNumber
	rotAttr = jointArray[0] + '_Side'
	checkAttrExist(ctrl,rotAttr,'double',-90,90,0,True,True)
	print('rotAttrC = ' + str(rotAttr))
	pitAttr = jointArray[0] + '_Up'
	checkAttrExist(ctrl,pitAttr,'double',-90,90,0,True,True)
	createLocator = maya.cmds.spaceLocator(n=name, p=(0,0,0))[0]
	whichJoint = jointArray[0]
	#POSITION THE FOOT LOCATOR AT THE FOOT JOINT, BUT MATCH THE ORIENTATION OF THE ANKLE LOCATOR
	#THEN PARENT THE FOOT LOCAT
	constainLocator = maya.cmds.parentConstraint(previousLocator, createLocator, weight=1 )
	maya.cmds.delete(constainLocator)
	constainLocator = maya.cmds.pointConstraint(previousLocator, createLocator, weight=1 )
	#CONNECT SECONDARY LOCATOR TO CONTROL ATTRIBUTES
	#footIK = createIKhandles('',name + '_','ikSCsolver',jointArray[0],jointArray[1],False,None,None)[0]
	#maya.cmds.parent(footIK,createLocator,a=True)
	#maya.cmds.parent(footIK,createLocator,a=True)
	maya.cmds.parent(createLocator,previousLocator,a=True)
	destination = createLocator + '.r' + jointAimAxis
	source = ctrl + '.' + rotAttr
	maya.cmds.connectAttr(source, destination, force=True)
	destination = createLocator + '.r' + jointUpAxis
	source = ctrl + '.' + pitAttr
	maya.cmds.connectAttr(source, destination, force=True)
	returnArray.append(createLocator)
	previousLocator = createLocator

	#CREATE THIRD LOCATOR PARENT TO THE CLAW FOOT JOINT
	name = jointArray[1] + '_LOC' + '_B' + getBranchNumber
	whichJoint = jointArray[1]
	constainLocator = maya.cmds.parentConstraint(previousLocator, createLocator, weight=1 )
	maya.cmds.delete(constainLocator)


	toeIK = createIKhandles('',name + '_','ikSCsolver',jointArray[1],jointArray[2],False,None,None)[0]
	maya.cmds.parent(toeIK,createLocator,a=True)
	maya.cmds.parent(createLocator,previousLocator,a=True)
	returnArray.append(createLocator)
	destination = createLocator + '.r' + jointUpAxis
	source = ctrl + '.' + pitAttr
	maya.cmds.connectAttr(source, destination, force=True)
	previousLocator = createLocator

	pitAttr = jointArray[1] + '_Up'
	checkAttrExist(ctrl,pitAttr,'double',-90,90,0,True,True)
	createLocator = maya.cmds.spaceLocator(n=name, p=(0,0,0))[0]

	return returnArray


def editTxtGrpButton(name,type):
	item = maya.cmds.ls(selection=True)
	if(len(item) == 1):
		if(type == 'textFieldButtonGrp'):
			maya.cmds.textFieldButtonGrp( name, e=True, text=str(item[0]))
	else:
		print('ERROR :: Select one item only, current items selected : ' + str(item))

def editTxtGrpButtonArray(name,type):
	array = maya.cmds.ls(selection=True)
	out = ''
	for i in array:
		out = out + i + '    '
		
	if(type == 'textFieldButtonGrp'):
		maya.cmds.textFieldButtonGrp( name, e=True, text=out)


def whichAxis(value):
	axis = ['x','X']
	if(value == 2):
		axis = ['y','Y']
	elif(value == 3):
		axis = ['z','Z']
	return axis

def whichConstaintType(value):
	axis = 'parent'
	if(value == 2):
		axis = 'point'
	elif(value == 3):
		axis = 'aim'
	return axis

def togglesystems(windowName):
	getCrv = maya.cmds.textFieldButtonGrp( windowName + '_curve', q=True, text=True )
	crve = getCrv.split()
	if(len(crve) > 0):
		maya.cmds.intFieldGrp( windowName + '_curveDivisions', e=False )
	else:
		maya.cmds.intFieldGrp( windowName + '_curveDivisions', e=True )

def buildWindow(windowName,windowTitle):
	questionButtonHeight=23
	maya.cmds.window( windowName, title= windowTitle, s=True, iconName='Short Name', widthHeight=(500, 600))
	maya.cmds.frameLayout(  windowName + '_frameLayout1', label=' ', borderStyle="in", lv=False, bv=False, mw=10, mh=10)
	maya.cmds.columnLayout(windowName + '_column1', adjustableColumn=True)

	maya.cmds.text( label= '   ' )

	maya.cmds.rowLayout(windowName + '_row1',numberOfColumns=3, columnWidth3=(80, 80, 80), adjustableColumn3=3, columnAlign3=('left','left','left'), columnAttach=[(1, 'both', 0), (2, 'both', 0), (3, 'both', 0)])
	
	maya.cmds.text( label= '   ' )
	maya.cmds.text( label= '   ' )
	maya.cmds.text( label= '   ' )
	maya.cmds.setParent('..')

	maya.cmds.text( label= '   ' )

	maya.cmds.frameLayout(windowName + '_formBase', label='Tabs', lv=False, labelAlign='top', borderStyle='in')
	maya.cmds.rowLayout(windowName + '_row2',numberOfColumns=2, columnWidth2=(450, 20), adjustableColumn2=2, columnAlign2=('left','left'), columnAttach=[(1, 'both', 0), (2, 'both', 0)])
	
	maya.cmds.columnLayout(windowName + '_global1a', rs=3)
	#maya.cmds.text( label= line1 )
	#maya.cmds.textFieldButtonGrp( windowName + '_sidePrefix', label='Get Side Prefix:', text='L', buttonLabel='Select', en=True, bc='editTxtGrpButtonArray("' + windowName + '_sidePrefix' + '","textFieldButtonGrp")' )
	#maya.cmds.text( label= line2 )
	#maya.cmds.textFieldButtonGrp( windowName + '_jointType', label='Get Joint Type:', text='IK', buttonLabel='Select', en=True, bc='editTxtGrpButtonArray("' + windowName + '_jointType' + '","textFieldButtonGrp")' )
	#maya.cmds.text( label= line3 )
	#maya.cmds.textFieldButtonGrp( windowName + '_limbName', label='Get Limb Name:', text='', buttonLabel='Select', en=True, bc='editTxtGrpButtonArray("' + windowName + '_limbName' + '","textFieldButtonGrp")' )
	maya.cmds.text( label= line4 )	
	maya.cmds.radioButtonGrp( windowName + '_jointUpAxis', label='Joint Up Axis:', labelArray3=['x', 'y', 'z'], numberOfRadioButtons=3, en=True, sl=1 )
	maya.cmds.text( label= line5 )	
	maya.cmds.radioButtonGrp( windowName + '_jointAimAxis', label='Joint Aim Axis:', labelArray3=['x', 'y', 'z'], numberOfRadioButtons=3, en=True, sl=1 )
	maya.cmds.text( label= line6 )
	maya.cmds.textFieldButtonGrp( windowName + '_joints', label='Get Joints:', text='', buttonLabel='Select', en=True, bc='editTxtGrpButtonArray("' + windowName + '_joints' + '","textFieldButtonGrp")' )
	maya.cmds.text( label= line7 )
	maya.cmds.textFieldButtonGrp( windowName + '_rollLoc', label='Get Roll Locator:', text='', buttonLabel='Select', en=True, bc='editTxtGrpButtonArray("' + windowName + '_rollLoc' + '","textFieldButtonGrp")' )
	maya.cmds.text( label= line8 )
	maya.cmds.textFieldButtonGrp( windowName + '_mainCtrl', label='Get Main Control:', text='', buttonLabel='Select', cc='togglesystems("' + windowName + '")', bc='editTxtGrpButtonArray("' + windowName + '_mainCtrl' + '","textFieldButtonGrp")', en=True )
	maya.cmds.setParent('..')

	maya.cmds.columnLayout(windowName + '_global1b', rs=3)
	maya.cmds.text( label= '   ' )
	maya.cmds.button(label='?', height = questionButtonHeight)
	maya.cmds.text( label= '   ' )
	maya.cmds.button(label='?', height = questionButtonHeight)
	maya.cmds.text( label= '   ' )
	maya.cmds.setParent('..')
	
	maya.cmds.setParent('..')

	maya.cmds.text( windowName + '_space1', label='' )
	maya.cmds.text( windowName + '_space2', label='' )
	maya.cmds.button(windowName + '_CreateSystem', label='Run Script', c='runWindow("' + windowName + '")' )

	maya.cmds.showWindow( windowName )

def runWindow(windowName):

	#getSidePrefix = maya.cmds.textFieldButtonGrp( windowName + '_sidePrefix', q=True, text=True )
	#sp = getSidePrefix.split()
	#sidePrefix = ''
	#if(len(sp) > 0):
	#	sidePrefix = sp[0]
	#print ('sidePrefix = ' + str(sidePrefix))
	#print('runWindow() :: sidePrefix = ' + str(sidePrefix))
	#getJointType = maya.cmds.textFieldButtonGrp( windowName + '_jointType', q=True, text=True )
	#jt = getJointType.split()
	#jointType = ''
	#if(len(jt) > 0):
	#	jointType = jt[0]
	#print ('jointType = ' + str(jointType))
	getRollLoc = maya.cmds.textFieldButtonGrp( windowName + '_rollLoc', q=True, text=True )
	rl = getRollLoc.split()
	rollLoc = ''
	if(len(rl) > 0):
		rollLoc = rl[0]
	print ('rollLoc = ' + str(rollLoc))
	jua = maya.cmds.radioButtonGrp( windowName + '_jointUpAxis', q=True, sl=True )
	jointUpAxis = whichAxis(jua)
	jaa = maya.cmds.radioButtonGrp( windowName + '_jointAimAxis', q=True, sl=True )
	jointAimAxis = whichAxis(jaa)
	getJoints = maya.cmds.textFieldButtonGrp( windowName + '_joints', q=True, text=True )
	jointsArray = getJoints.split()
	getCtrl = maya.cmds.textFieldButtonGrp( windowName + '_mainCtrl', q=True, text=True )
	ctrl = getCtrl.split()
	mainCtrl = ''
	if(len(ctrl) > 0):
		mainCtrl = ctrl[0]
	print ('mainCtrl = ' + str(mainCtrl))
	
	ikFootJoints = []
	for j in range(0,len(jointsArray)-2,1):
		ikFootJoints.append(jointsArray[j])

	print('rollLoc = ' + str(rollLoc))
	print('mainCtrl = ' + str(mainCtrl))

	#pitchAxis = jointUpAxis # NORMALLY 'X'
	#rotateAxis = 'z' # NORMALLY 'Y'
	#rollAxis = jointAimAxis # NORMALLY 'Z'

	#if(pitchAxis == 'z'):
	#	if(rotateAxis == 'y'):
	#		rollAxis = 'x'
	#	else:
	#		rollAxis = 'y'
	#elif(pitchAxis == 'y'): 
	#	if(rotateAxis == 'x'):
	#		rollAxis = 'z'
	#	else:
	#		rollAxis = 'x'

	
	addClaw(jointsArray,rollLoc,jointAimAxis[0],jointUpAxis[0],mainCtrl)

###############################################################################################
#     SELECT:	
#	1. SELECT THE ALL ADDITIONAL CLAW JOINTS FROM THE START TO END
#	2. SELECT roll_LOC
#	3. MAIN CONTROL
###############################################################################################




line4 = '	SPECIFIY THE CONTROL AIM AXIS:-'
line5 = '	SPECIFIY THE JOINT AIM AXIS:-'
line6 = '	SELECT THE ALL ADDITIONAL CLAW JOINTS FROM THE START TO END:-'
line7 = '	SELECT roll LOCATOR:-'
line8 = '	SELECT MAIN CONTROL:-'


ver = ' : ver 02.001 '
windowTitle = 'Append Biped Foot Rig Add Claw' + ver
rebuildCurveWindowName = 'AppendFootRigAddClaw'
deleteWindow(rebuildCurveWindowName)
buildWindow(rebuildCurveWindowName,windowTitle)


