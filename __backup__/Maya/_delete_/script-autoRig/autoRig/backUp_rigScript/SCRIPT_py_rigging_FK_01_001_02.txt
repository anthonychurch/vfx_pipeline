#create IK
#set up polevector control
#

import maya.cmds
import random
import math


def testNodeName(node,name):
	value = True
	nodeType = maya.cmds.objectType( node )
	if( nodeType != type ):
		value = False
		#print 'WARNING:: testNodeType : ' + str(nodeType) + ' does not match ' + type + '/n'
	return value

def getWStransform(obj):
	transform = maya.cmds.xform( obj, q=True, ws=True, t=True )
	return transform

def getWSrotate(obj):
	rotate = maya.cmds.xform( obj, q=True, ws=True, ro=True )
	return rotate

def setWStransform(obj,position):
	maya.cmds.xform( obj, ws=True, t=(position[0],position[1],position[2]) )

def setWSrotate(obj,rotate):
	maya.cmds.xform( obj, ws=True, ro=(rotate[0],rotate[1],rotate[2]) )

def setupPolVector(pvCtrl,joint,distance,upAxis):
	pvGrp = pvCtrl + '_GRP'
	pos = getWStransform(joint)
	setWStransform(pvGrp,pos)
	rot = getWSrotate(joint)
	setWSrotate(pvGrp,rot)
	maya.cmds.parent(pvGrp,joint)
	maya.cmds.setAttr(pvGrp + '.t' + upAxis, distance)
	maya.cmds.parent(pvGrp,world=True)

def findNamePrefix(name,token):
	newName = name[len(token):len(name)]	
	return newName

def setUpGrp(array):
	i = 0
	previous = array[0]
	for a in array:
		exist = maya.cmds.objExists(a)
		if(exist == False ):
			maya.cmds.group(em=True,n=a,w=True)
			if(i > 0 ):
				maya.cmds.parent(a,previous,r=True)
		i = i + 1
		previous = a

def filterSelection(array,breakerObj):
	newArray = []
	brake = False
	for n in array:
		if(brake == False):
			newArray.append(n)
			if(n == breakerObj):
				#print n
				brake = True
	return newArray
	
def createIKjoints(jointArray,sidePrefix,jointType,group):
	newArray = []
	maya.cmds.select( clear=True )
	duplicate = maya.cmds.duplicate(jointArray[0])[0]
	maya.cmds.makeIdentity( duplicate, apply=True, t=0, r=1, s=0, n=0 )
	maya.cmds.parent(duplicate, w=True)
	howManyJoints = len(jointArray)
	for i in range(0,len(jointArray),1):
		n = findNamePrefix(jointArray[i],sidePrefix)
		newn = sidePrefix + jointType + n
		j = maya.cmds.rename(duplicate,newn)
		newArray.append(j)
		child = maya.cmds.listRelatives(j,c=True,f=True)
		if(child != None):
			if(len(child) == 1):
				duplicate = child[0]
			else:
				print('ERROR: ' + str(j) + ' has a branch of Multiple Joints')
	last = newArray[len(newArray)-1]
	c = maya.cmds.listRelatives(last,c=True,f=True)
	if(c != None):
		for n in c:
			maya.cmds.delete(n)
	maya.cmds.parent(newArray[0],group[len(group)-1])
	return newArray
	
def createIKhandles(prefix,limbType,type,startJoint,endJoint,pvCtrl,stretchy):
	ikh = prefix + limbType + 'ikHandle'
	maya.cmds.ikHandle(n = ikh, sj = startJoint, ee = endJoint, sol = type)
	if(type == 'ikRPsolver'):
		maya.cmds.poleVectorConstraint( pvCtrl, ikh )
	if(stretchy == True):
		print 'Need to make IK stretch joints'

def setUpFKstretch(prefix,limbTypeName,fkJointArray,howManyNodes,mainCtrl,startCTRL,endCTRL):
	#select second and last joint of Ik Chain, then the ctrl
	howManyJoints = len(ikJointArray)
	
	defaultAttr = '.default'#must be boolean
	stretchFKAttr = '.stretchFK'

	stretchNormaliseNode = prefix + 'stretchNormalise_setRange'
	#FKPlusNode = prefix + 'default_plusMinusAverage'
	FKNormaliseNode = prefix + 'scale_multiplyDivide'
	
	startJoint = ikJointArray[0]
	print('startJoint = ' + str(startJoint))
	endJoint = ikJointArray[len(ikJointArray)-1]
	print('endJoint = ' + str(endJoint))

	#START///////////////////////////////////CREATE SETRANGE, MULTIPLYDIVIDE NODES AND 
	#START///////////////////////////////////FOR ALL THE FK JOINTS. GET EACH FK JOINT TX VALUE 
	#START///////////////////////////////////
	
	#create set range node to normalise the stretch FK attribute*********************START**********create set range node to normalise the stretch FK attribute
	setRangeNode = maya.cmds.shadingNode('setRange',n=stretchNormaliseNode,au=True)
	connector = mainCtrl + stretchIKAttr
	socket = setRangeNode + '.valueX'
	maya.cmds.connectAttr(connector, socket, force=True)

	maya.cmds.setAttr(setRangeNode + '.oldMaxX', 1000)
	maya.cmds.setAttr(setRangeNode + '.maxX', 100)
	#create set range node to normalise the stretch FK attribute*********************END**********create set range 
	
	
	IKConditionNode = conditionNode;
	IKNormaliseNode = normaliseNode;
	IKAutoStretchNode = autoStretch;
	IKStretchNode = stretch;
	stretchNormaliseNode = setRangeNode;

	#END///////////////////////////////////CREATE SETRANGE, MULTIPLYDIVIDE NODES AND 
	#END///////////////////////////////////FOR ALL THE FK JOINTS. GET EACH FK JOINT TX VALUE 
	#END///////////////////////////////////

	#START/////////////////////////////////////////////////////////////MULTIPLIER NODES READY TO BE CONNECT RO IK JOINT TRANSLATEX
	multiplierNodes = []
	for i in range(0,howManyNodes,1):
		multiplierNode = maya.cmds.shadingNode('multiplyDivide',n=FKNormaliseNode + '1',au=True)
		#multiplierNodes[i] = multiplierNode
		multiplierNodes.append(multiplierNode)

	#END///////////////////////////////////////////////////////////////MULTIPLIER NODES READY TO BE CONNECT RO IK JOINT TRANSLATEX

	#START/////////////////////////////////////////////////////////////CONNECT THE CONDITION NODE TO MULTIPLIER NODES READY TO BE CONNECT TO IK JOINT TRANSLATEX
	connectorAttribute1 = '.valueX'
	socketAttribute1 = '.input' 
	connector1 = stretchNormaliseNode + connectorAttribute1

	connectorAttribute2 = '.output'

	whichJoint = 0
	brake = 0

	#CONNECT SETRANGE NODE TO MULYIPLIER NODES THEN TO INDIVIDUAL JOINTS
	for i in range(0,howManyNodes,1):
		multiply = i + 1 #use to select the right joint in $sel[] and "spine_multiplier_multiplyDivide" node
	
		whichAxis = [' ', 'X', 'Y', 'Z']
		for j in range(1,4,1):
			if(brake == 0):
				socket1 = multiplierNodes[i] + (socketAttribute1 + '2' + whichAxis[j])
				maya.cmds.connectAttr(connector1, socket1, force=True)
		
				getAttr = maya.cmds.getAttr(ikJointArray[whichJoint] + '.tx')
				setAttr = maya.cmds.setAttr(multiplierNodes[i] + (socketAttribute1 + '1' + whichAxis[j]), getAttr)
		
				connector2 = IKMultiplierNode + str(multiply) + (connectorAttribute2 + whichAxis[j])
				socket2 = (ikJointArray[whichJoint] + '.tx')
				maya.cmds.connectAttr(connector2, socket2, force=True)

				whichJoint = whichJoint + 1
	
				print ('whichJoint = ' + str(whichJoint))
				print ('howManyJoints = ' + str(howManyJoints))

				#LOOP BREAK TO CATER FOR ODD NUMBER OF JOINTS
				if(whichJoint == howManyJoints):
					brake = 1
	
		print ('i = ' + str(i) )

	#END//////////////////////////////////////////////////////////////CONNECT THE CONDITION NODE TO MULTIPLIER NODES READY TO BE CONNECT TO IK JOINT TRANSLATEX
	#================================================================================================================================
	#END++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

	#START - MAIN COMMANDS////////////////////////////////////////////////////////////////////////////////////////////////////////
	#START - MAIN COMMANDS////////////////////////////////////////////////////////////////////////////////////////////////////////
	#START - MAIN COMMANDS////////////////////////////////////////////////////////////////////////////////////////////////////////
		
		

sidePrefix = 'L_'
upAxis = 'z'
#howManyTweenJoints = 3
#howManyKeyJoints = 3
jointType = 'FK_'
limbType = 'bipedLeg' #else 'armOrQuadLeg'
prefix = sidePrefix + jointType
limbTypeName = 'leg_'


mainControl = prefix + 'foot_CTRL'
startControl = prefix + 'hip_CTRL' #'shoulder_LOC'
midControl = prefix + 'knee_CTRL' #'shoulder_LOC'
endControl = prefix + 'toe_CTRL' #'wrist_CTRL'
pvControl = prefix + limbTypeName + 'poleVector_tracking_LOC'


groupsCTRL = ['char_GRP','DO_NOT_ALTER_GRP','skeleton_scale_GRP','CTRL_skeleton_GRP']
groupsDIM = ['char_GRP','DO_NOT_ALTER_GRP','dimension_GRP']
skeletonCtrlGrp = groupsCTRL[3]


sel = maya.cmds.ls(selection = True)
startJoint = sel[0]
midJoint = sidePrefix + 'knee'
endJoint = sel[1]
toeJoint = None
howwManyKeyJoints = 3


if(len(sel) > 2):
	toeJoint = sel[2]

maya.cmds.select(sel[0])
maya.cmds.select(hierarchy = True)
selHi = maya.cmds.ls(selection = True)
if(limbTypeName == 'leg_'):
	if(len(sel) > 2):
		selectedJoints = filterSelection(selHi,toeJoint)
	else:
		print('ERROR :: No toe joint selected')
else:
	selectedJoints = filterSelection(selHi,endJoint)

	
maya.cmds.select(clear=True)


setUpGrp(groupsCTRL)
setupPolVector(pvControl,midJoint,0,upAxis)


#ikJoints are only the joints that make up the IKPhandle chain
fkJoints = createIKjoints(selectedJoints,sidePrefix,jointType,groupsCTRL)
ej = prefix + findNamePrefix(endJoint,sidePrefix)
print('ej = ' + str(ej))
#createIKhandles(prefix,limbTypeName,'ikRPsolver',ikJoints[0],ej,pvControl,True)
#if(limbTypeName == 'leg_'):
	#createIKhandles(prefix,'foot-','ikSCsolver',ikJoints[len(ikJoints)-3],ikJoints[len(ikJoints)-2],False,False)
	#createIKhandles(prefix,'toe_','ikSCsolver',ikJoints[len(ikJoints)-2],ikJoints[len(ikJoints)-1],False,False)


prefix = sidePrefix + jointType + limbTypeName
print('ikendJoint = ' + str(ikendJoint))
fkJointsFiltered = filterSelection(fkJoints,ej)
print('fkJointsFiltered = ' + str(fkJointsFiltered))
print('len(fkJointsFiltered) = ' + str(len(fkJointsFiltered)))
howManyNodes = int(math.ceil(len(fkJointsFiltered) / 3)) #This divided by three because of X,Y,Z
print('howManyNodes = ' + str(howManyNodes))
setUpFKstretch(prefix,limbTypeName,fkJointsFiltered,howManyNodes,mainControl,startControl,endControl)