#create IK
#set up polevector control
#

import maya.cmds
import random
import math

def getWStransform(obj):
	transform = maya.cmds.xform( obj, q=True, ws=True, t=True )
	return transform

def getWSrotate(obj):
	rotate = maya.cmds.xform( obj, q=True, ws=True, ro=True )
	return rotate

def setWStransform(obj,position):
	maya.cmds.xform( obj, ws=True, t=(position[0],position[1],position[2]) )

def setWSrotate(obj,rotate):
	maya.cmds.xform( obj, ws=True, ro=(rotate[0],rotate[1],rotate[2]) )

def findNamePrefix(name,token):
	newName = name[len(token):len(name)]	
	return newName

def setUpGrp(array):
	i = 0
	previous = array[0]
	for a in array:
		exist = maya.cmds.objExists(a)
		if(exist == False ):
			maya.cmds.group(em=True,n=a,w=True)
			if(i > 0 ):
				maya.cmds.parent(a,previous,r=True)
		i = i + 1
		previous = a

def filterSelection(array,breakerObj):
	newArray = []
	brake = False
	for n in array:
		if(brake == False):
			newArray.append(n)
			if(n == breakerObj):
				#print n
				brake = True
	print ('newArray = ' + str(newArray) )
	return newArray
	
def createIKjoints(jointArray,sidePrefix,jointType,group):
	newArray = []
	#brake = False
	endJoint = jointArray[len(jointArray)-1]
	print('endJoint = ' + str(endJoint))
	maya.cmds.select( clear=True )
	duplicate = maya.cmds.duplicate(jointArray[0])[0]
	maya.cmds.makeIdentity( duplicate, apply=True, t=0, r=1, s=0, n=0 )
	maya.cmds.parent(duplicate, w=True)
	howManyJoints = len(jointArray)
	for i in range(0,len(jointArray),1):
		n = findNamePrefix(jointArray[i],sidePrefix)
		newn = sidePrefix + jointType + n
		print('duplicate = ' + str(duplicate))
		j = maya.cmds.rename(duplicate,newn)
		newArray.append(j)
		child = maya.cmds.listRelatives(j,c=True,f=True)
		if(child != None):
			if(len(child) == 1):
				duplicate = child[0]
			else:
				print('child = ' + str(child))
				print(str(j) + ' has a branch of Multiple Joints')
				for c in child:
					print('c = ' + str(c))
					gc = maya.cmds.listRelatives(c,c=True,ad=True,f=True)
					print('gc = ' + str(gc))
					if(gc != None):
						for g in gc:
							prefixToIgnore = g.rfind('|')
							test = g[prefixToIgnore+1:len(g)]
							print('test = ' + str(test))
							if(test == endJoint):
								print('c = ' + str(c))
								duplicate = c
					else:
						maya.cmds.delete(c)

	last = newArray[len(newArray)-1]
	c = maya.cmds.listRelatives(last,c=True,f=True)
	if(c != None):
		for n in c:
			maya.cmds.delete(n)
	maya.cmds.parent(newArray[0],group[len(group)-1])
	return newArray
							
def createIKhandles(prefix,limbType,type,startJoint,endJoint,pvCtrl):
	ikh = prefix + limbType + 'ikHandle'
	h = maya.cmds.ikHandle(n = ikh, sj = startJoint, ee = endJoint, sol = type)
	print('h = ' + str(h))
	if(type == 'ikRPsolver'):
		maya.cmds.poleVectorConstraint( pvCtrl, ikh )
				
	return h

def getTweenJoints(jointArray,numberTweenJoints):
	increment = 0
	newArray = []
	#print('increment = ' + str(increment) )
	print('jointArray = ' + str(jointArray) )
	for j in range(0,len(jointArray),1):
		print('j = ' + str(j) )
		if( j == increment ):
			increment = increment + howManyTweenJoints + 1
			print('increment = ' + str(increment) )
		else:
			newArray.append(jointArray[j])
			print('newArray = ' + str(newArray) )

	return newArray

def setUpIKstretch(prefix,limbTypeName,ikJointArray,howManyNodes,mainCtrl,startCTRL,endCTRL,dimGroup):
	#select second and last joint of Ik Chain, then the ctrl
	howManyJoints = len(ikJointArray)
	
	autoSwitchAttr = '.autoStretchIK'#must be boolean
	stretchIKAttr = '.stretchIK'
	stretchNormaliseNode = prefix + 'stretchNormalise_setRange'

	IKNormaliseNode = prefix + 'normalize_multiplyDivide'
	IKMultiplierNode = prefix + 'multiplier_multiplyDivide'
	IKConditionNode = prefix + 'autoStretch_condition'
	IKScaleLimiterNode = prefix + 'limit_multiplyDivide'
	IKAutoStretchBlendNode = prefix + 'autoStretch_blend'
	IKStretchBlendNode = prefix + 'stretch_blend'
	IKStretchDampener = prefix + 'StretchDampener_condition'
	IKStretchRemapNode = prefix + 'stretchDampenRemap_remapValue'
	IKStretchBlendNode = prefix + 'stretchDampenBlend_blend'
	IKDampenValueNode = prefix + 'DampenValue_multiplyDivide'
	dampenAmount = 0.960

	startJoint = ikJointArray[0]
	print('startJoint = ' + str(startJoint))
	endJoint = ikJointArray[len(ikJointArray)-1]
	print('endJoint = ' + str(endJoint))

	distanceName = prefix + 'distanceDimension1'

	distanceNode = maya.cmds.distanceDimension( sp=(-2, 0, 0), ep=(2, 0, 0) )
	
	maya.cmds.parent(distanceNode,dimGroup)
	distanceTrans = maya.cmds.listRelatives(distanceNode,p=True,f=True)
	distLocators = maya.cmds.listConnections(distanceNode,t='locator')
	print('distLocators = ' + str(distLocators))
	startLoc = maya.cmds.rename(distLocators[0],prefix + 'start_dim_LOC')
	endLoc = maya.cmds.rename(distLocators[1],prefix + 'end_dim_LOC')
	startLocPos = getWStransform(startJoint)
	setWStransform(startLoc,startLocPos)
	endLocPos = getWStransform(endJoint)
	setWStransform(endLoc,endLocPos)
	distanceName = maya.cmds.rename(distanceTrans[0],distanceName)
	print('distanceName = ' + str(distanceName))

	startParent = maya.cmds.parentConstraint(startLoc,startCTRL)
	endParent = maya.cmds.parentConstraint(endLoc,endCTRL)
	maya.cmds.delete(endParent)
	maya.cmds.parent(endLoc,mainCtrl,a=True)
	
	#START///////////////////////////////////CREATE CONDITION, NORMALISE MULTIPLYDIVIDE NODE AND 
	#START///////////////////////////////////CONNECT THE DISTANCE NODES DISTANCE ATTRIBUTE TO NORMALISE MULTIPLYDIVIDE NODES INPUT1X 
	#START///////////////////////////////////CONNECT THE NORMALISE MULTIPLYDIVIDE NODES OUPUTX TO 1st TERM OF CONDITION NODE
	
	#create set range node to normalise the stretch IK attribute*********************START**********create set range node to normalise the stretch IK attribute
	setRangeNode = maya.cmds.shadingNode('setRange',n=stretchNormaliseNode,au=True)
	connector = mainCtrl + stretchIKAttr
	socket = setRangeNode + '.valueX'
	maya.cmds.connectAttr(connector, socket, force=True)

	maya.cmds.setAttr(setRangeNode + '.oldMaxX', 10)
	maya.cmds.setAttr(setRangeNode + '.maxX', 1)
	#create set range node to normalise the stretch IK attribute*********************END**********create set range 
	
	#CREATE NORMALISE MULTIPLYDIVIDE NODE************************************************************START**********CREATE NORMALISE MULTIPLYDIVIDE NODE
	normaliseNode = maya.cmds.shadingNode('multiplyDivide',n=IKNormaliseNode + '1',au=True)
	connector = distanceName + '.distance'
	socket = normaliseNode + '.input1X'
	maya.cmds.connectAttr(connector, socket, force=True)

	#SET INPUT2X TO DISTANCE VALUE AND SET **************************************************************START**********SET INPUT2X TO DISTANCE VALUE AND SET 
	#MULTIPLYDIVIDE NODES OPERATION TO DIVIDE************************************************************START**********MULTIPLYDIVIDE NODES OPERATION TO DIVIDE
	socketAttribute = '.input2X'

	maya.cmds.setAttr(normaliseNode + '.operation', 2)
	distance = maya.cmds.getAttr(connector)
	print ('distance = ' + str(distance))

	maya.cmds.setAttr(normaliseNode + socketAttribute, distance) 
	#set Normalise nodes Z output to 1; ie 1 / 1 = 1. This will be connected to $stretch input 1R
	maya.cmds.setAttr(normaliseNode + '.input1Z', 1)
	maya.cmds.setAttr(normaliseNode + '.input2Z', 1)

	#SET INPUT2X TO DISTANCE VALUE AND SET **************************************************************END**********SET INPUT2X TO DISTANCE VALUE AND SET 
	#MULTIPLYDIVIDE NODES OPERATION TO DIVIDE************************************************************END**********MULTIPLYDIVIDE NODES OPERATION TO DIVIDE

		#CREATE NORMALISE MULTIPLYDIVIDE NODE************************************************************END**********CREATE NORMALISE MULTIPLYDIVIDE NODE

	stretchRemapNode = maya.cmds.shadingNode('remapValue',n=IKStretchRemapNode + '1',au=True) 
	socket =  stretchRemapNode + '.inputValue'
	connector =  normaliseNode + '.outputX'  

	maya.cmds.connectAttr(connector, socket, force=True)

	maya.cmds.setAttr(stretchRemapNode + '.value[0].value_Position',0.0)
	maya.cmds.setAttr(stretchRemapNode + '.value[0].value_FloatValue',0.0)
	maya.cmds.setAttr(stretchRemapNode + '.value[0].value_Interp',2)

	maya.cmds.setAttr(stretchRemapNode + '.value[1].value_Position',1.0)
	maya.cmds.setAttr(stretchRemapNode + '.value[1].value_FloatValue',0.0)
	maya.cmds.setAttr(stretchRemapNode + '.value[2].value_Interp',2)

	maya.cmds.setAttr(stretchRemapNode + '.value[2].value_FloatValue',1.0)
	maya.cmds.setAttr(stretchRemapNode + '.value[2].value_Position',0.5)
	maya.cmds.setAttr(stretchRemapNode + '.value[2].value_Interp',2)

	maya.cmds.setAttr(stretchRemapNode + '.inputMin',0)
	maya.cmds.setAttr(stretchRemapNode + '.inputMax',2)

	StretchBlendNode = maya.cmds.shadingNode('blendColors',n=IKStretchBlendNode + '1',au=True) 

	socket =  StretchBlendNode + '.blender'
	connector =  stretchRemapNode + '.outValue'  

	maya.cmds.connectAttr(connector, socket, force=True)

	dampenValueNode = maya.cmds.shadingNode('multiplyDivide',n=IKDampenValueNode + '1',au=True) 
	
	maya.cmds.setAttr(dampenValueNode + '.input1X',dampenAmount)
	maya.cmds.setAttr(dampenValueNode + '.input1Y',1)
	socket = StretchBlendNode + '.color2R'
	connector = dampenValueNode + '.outputX'   

	maya.cmds.connectAttr(connector, socket, force=True)

	socket = StretchBlendNode + '.color1R'
	connector = dampenValueNode + '.outputY'   

	maya.cmds.connectAttr(connector, socket, force=True)

	stretchDampenerNode = maya.cmds.shadingNode('condition',n=IKStretchDampener + '1',au=True) 
	socket =  stretchDampenerNode + '.firstTerm'
	connector =  StretchBlendNode + '.outputR'  

	maya.cmds.connectAttr(connector, socket, force=True)

	maya.cmds.setAttr(stretchDampenerNode + '.operation',0)
	maya.cmds.setAttr(stretchDampenerNode + '.secondTerm',1)
	maya.cmds.setAttr(stretchDampenerNode + '.colorIfTrueR',1)
	
	socket =  stretchDampenerNode + '.colorIfFalseR'
	connector =  StretchBlendNode + '.outputR'  

	maya.cmds.connectAttr(connector, socket, force=True)

	#??????????????????????????THIS IS REDUNDANT??????????????????????????????
	#START/////////////////////////////////////////////////////////////CREATE LIMITER MULTIPLYDIVIDE NODE
	limiterNode = maya.cmds.shadingNode('multiplyDivide',n=IKScaleLimiterNode + '1',au=True) 
	
	IKScaleLimiterNode = limiterNode

	#CONNECT NORMALISE MULTIPLYDIVIDE NODES OUPUTX TO ".colorIfFalseR" OF CONDITION NODE
	socket = limiterNode + '.input2X'
	connector = stretchDampenerNode + '.outColorR'   

	maya.cmds.connectAttr(connector, socket, force=True)

	socket = limiterNode + '.input1X'
	connector = normaliseNode + '.outputX'   

	maya.cmds.connectAttr(connector, socket, force=True)

	#END//////////////////////////////////////////////////////////////CREATE LIMITER MULTIPLYDIVIDE NODE
	#??????????????????????????THIS IS REDUNDANT??????????????????????????????

	#CREATE CONDITION NODE AND CONNECT NORMALISE ********************************************START********CREATE CONDITION NODE AND CONNECT NORMALISE 
	#MULTIPLYDIVIDE NODES OUPUTX TO 1st TERM OF CONDITION NODE*******************************START********MULTIPLYDIVIDE NODES OUPUTX TO 1st TERM OF CONDITION NODE
	conditionNode = maya.cmds.shadingNode('condition',n=IKConditionNode + '1',au=True) 
	socket =  conditionNode + '.firstTerm'
	connector =  normaliseNode + '.outputX'  

	maya.cmds.connectAttr(connector, socket, force=True)

	maya.cmds.setAttr(conditionNode + '.operation',4)
	maya.cmds.setAttr(conditionNode + '.secondTerm',1)
	maya.cmds.setAttr(conditionNode + '.colorIfTrueR',1)

	#CONNECT NORMALISE MULTIPLYDIVIDE NODES OUPUTX TO ".colorIfFalseR" OF CONDITION NODE
	socket = conditionNode + '.colorIfFalseR'
	connector = IKScaleLimiterNode + '.outputX'   

	maya.cmds.connectAttr(connector, socket, force=True)

	#CREATE CONDITION NODE AND CONNECT NORMALISE ********************************************END********REATE CONDITION NODE AND CONNECT NORMALISE 
	#MULTIPLYDIVIDE NODES OUPUTX TO 1st TERM OF CONDITION NODE*******************************END********MULTIPLYDIVIDE NODES OUPUTX TO 1st TERM OF CONDITION NODE

	#CREATE AUTO STETCH ON AND OFF NODE********************************************START********CREATE AUTO STETCH ON AND OFF NODE
	#connect waist CTRL auto switch to the first term
	connector = mainCtrl + autoSwitchAttr
	socket = setRangeNode + '.valueY'
	maya.cmds.connectAttr(connector, socket, force=True)

	maya.cmds.setAttr(setRangeNode + '.oldMaxY', 10)
	maya.cmds.setAttr(setRangeNode + '.maxY', 1)

	autoStretch = maya.cmds.shadingNode('blendColors',n=IKAutoStretchBlendNode + '1',au=True) 
	socket = autoStretch + '.blender' #waist CTRL attribute auto stretch via set Range
	connector = setRangeNode + '.outValueY' 
	maya.cmds.connectAttr(connector, socket, force=True)

	#from auto stretch condition node;  $conditionNode 
	socket = autoStretch + '.color1R'
	connector = conditionNode + '.outColorR'
	maya.cmds.connectAttr(connector, socket, force=True)

	#from stretch  node;  $stretch 
	socket = autoStretch + '.color2R'
	connector = IKScaleLimiterNode + '.outputX'
	maya.cmds.connectAttr(connector, socket, force=True)
	#CREATE AUTO STETCH ON AND OFF NODE********************************************END********CREATE AUTO STETCH ON AND OFF NODE

	#CREATE STRETCH ON AND OFF NODE**************************************************************START*******************CREATE STRETCH ON AND OFF NODE
	stretch =  maya.cmds.shadingNode('blendColors',n=IKStretchBlendNode + '1',au=True) 
	socket = stretch + '.color2R'
	connector = normaliseNode + '.outputZ'
	maya.cmds.connectAttr(connector, socket, force=True)
	
	socket = stretch + '.color1R'
	connector =  autoStretch + '.outputR'
	maya.cmds.connectAttr(connector, socket, force=True)

	#connect $setRangeNode .outpUtX to $stretch blend input
	socket =  stretch + '.blender'
	connector =  setRangeNode + '.outValueX'
	maya.cmds.connectAttr(connector, socket, force=True)

	#CREATE STRETCH ON AND OFF NODE**************************************************************END*******************CREATE STRETCH ON AND OFF NODE

	IKConditionNode = conditionNode
	IKNormaliseNode = normaliseNode
	IKAutoStretchBlendNode = autoStretch
	IKStretchBlendNode = stretch
	stretchNormaliseNode = setRangeNode

	#END///////////////////////////////////CREATE CONDITION, NORMALISE MULTIPLYDIVIDE NODE AND 
	#END///////////////////////////////////CONNECT THE DISTANCE NODES DISTANCE ATTRIBUTE TO NORMALISE MULTIPLYDIVIDE NODES INPUT1X 
	#END///////////////////////////////////CONNECT THE NORMALISE MULTIPLYDIVIDE NODES OUPUTX TO 1st TERM OF CONDITION NODE

	#START/////////////////////////////////////////////////////////////MULTIPLIER NODES READY TO BE CONNECT RO IK JOINT TRANSLATEX
	multiplierNodes = []
	for i in range(0,howManyNodes,1):
		multiplierNode = maya.cmds.shadingNode('multiplyDivide',n=IKMultiplierNode + '1',au=True)
		#multiplierNodes[i] = multiplierNode
		multiplierNodes.append(multiplierNode)

	#END///////////////////////////////////////////////////////////////MULTIPLIER NODES READY TO BE CONNECT RO IK JOINT TRANSLATEX

	#START/////////////////////////////////////////////////////////////CONNECT THE CONDITION NODE TO MULTIPLIER NODES READY TO BE CONNECT TO IK JOINT TRANSLATEX
	connectorAttribute1 = '.outputR'
	socketAttribute1 = '.input' 
	connector1 = IKStretchBlendNode + connectorAttribute1

	connectorAttribute2 = '.output'

	whichJoint = 1
	brake = 0

	#CONNECT CONDITION NODE TO MULYIPLIER NODES
	for i in range(0,howManyNodes,1):
		multiply = i + 1 #use to select the right joint in $sel[] and "spine_multiplier_multiplyDivide" node
	
		whichAxis = [' ', 'X', 'Y', 'Z']
		for j in range(1,4,1):
			if(brake == 0):
				socket1 = multiplierNodes[i] + (socketAttribute1 + '2' + whichAxis[j])
				maya.cmds.connectAttr(connector1, socket1, force=True)
		
				getAttr = maya.cmds.getAttr(ikJointArray[whichJoint] + '.tx')
				setAttr = maya.cmds.setAttr(multiplierNodes[i] + (socketAttribute1 + '1' + whichAxis[j]), getAttr)
		
				connector2 = IKMultiplierNode + str(multiply) + (connectorAttribute2 + whichAxis[j])
				socket2 = (ikJointArray[whichJoint] + '.tx')
				maya.cmds.connectAttr(connector2, socket2, force=True)

				whichJoint = whichJoint + 1
	
				print ('whichJoint = ' + str(whichJoint))
				print ('howManyJoints = ' + str(howManyJoints))

				#LOOP BREAK TO CATER FOR ODD NUMBER OF JOINTS
				if(whichJoint == howManyJoints):
					brake = 1
	
		print ('i = ' + str(i) )

	#END//////////////////////////////////////////////////////////////CONNECT THE CONDITION NODE TO MULTIPLIER NODES READY TO BE CONNECT TO IK JOINT TRANSLATEX
	#================================================================================================================================
	#END++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

	#^^^^^^^^^^^^^^^-----TESTED AND WORKS-----^^^^^^^^^^^^^^^!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!





#START - MAIN COMMANDS////////////////////////////////////////////////////////////////////////////////////////////////////////
#START - MAIN COMMANDS////////////////////////////////////////////////////////////////////////////////////////////////////////
#START - MAIN COMMANDS////////////////////////////////////////////////////////////////////////////////////////////////////////
		
		

sidePrefix = 'L_'
upAxis = 'z'
howManyTweenJoints = 0
howManyKeyJoints = 3
jointType = 'splineIK_'
limbType = 'bipedLeg' #else 'armOrQuadLeg'
prefix = sidePrefix + jointType
limbTypeName = 'leg_'

mainCtrl = prefix + 'foot_CTRL'
startCtrl = prefix + 'hip_LOC' #'shoulder_LOC'
endCtrl = prefix + 'ankle_LOC1' #'wrist_CTRL'
pvCtrl = prefix + limbTypeName + 'poleVector_CTRL'

groupSkeleton = ['char_GRP','DO_NOT_ALTER_GRP','skeleton_scale_GRP','CTRL_skeleton_GRP']
groupDim = ['char_GRP','DO_NOT_ALTER_GRP','dimension_GRP']
skeletonCtrlGrp = groupSkeleton[3]

sel = maya.cmds.ls(selection = True)
startJoint = sel[0]
midJoint = sidePrefix + 'knee'
endJoint = sel[1]
toeJoint = None
howwManyKeyJoints = 3

if(len(sel) > 2):
	toeJoint = sel[2]

maya.cmds.select(sel[0])
maya.cmds.select(hierarchy = True)
selHi = maya.cmds.ls(selection = True)
selectedJoints = []
if(limbTypeName == 'leg_'):
	if(len(sel) > 2):
		selectedJoints = filterSelection(selHi,toeJoint)
	else:
		print('ERROR :: No toe joint selected')
else:
	selectedJoints = filterSelection(selHi,endJoint)
print('selectedJoints = ' + str(selectedJoints))
	
maya.cmds.select(clear=True)

setUpGrp(groupSkeleton)


#ikJoints are only the joints that make up the IKPhandle chain
splineIKJoints = createIKjoints(selectedJoints,sidePrefix,jointType,groupSkeleton)
print('splineIKJoints = ' + str(splineIKJoints))
#ej = prefix + findNamePrefix(endJoint,sidePrefix)
#print('ej = ' + str(ej))
#mainIkhandle = createIKhandles(prefix,limbTypeName,'ikRPsolver',ikJoints[0],ej,pvCtrl)
#print('mainIkhandle = ' + str(mainIkhandle))
#grp = maya.cmds.listRelatives(pvCtrl,p=True,type='transform')
#print('grp = ' + str(grp))
#if(grp != None):
#	maya.cmds.parent(grp[0],mainCtrl,a=True)
#else:
#	maya.cmds.parent(pvCtrl,mainCtrl,a=True)
#
#if(limbTypeName == 'leg_'):
	print('leg_')
#
#prefix = sidePrefix + jointType + limbTypeName
#print('prefix = ' + str(prefix))
#ikJointsFiltered = filterSelection(ikJoints,ej)
#print('ikJointsFiltered = ' + str(ikJointsFiltered))
#print('len(ikJointsFiltered) = ' + str(len(ikJointsFiltered)))
#howManyNodes = int(math.ceil(len(ikJointsFiltered) / 3)) #This divided by three because of X,Y,Z
#print('howManyNodes = ' + str(howManyNodes))
#setUpGrp(groupDim)
setUpIKstretch(prefix,limbTypeName,ikJointsFiltered,howManyNodes,mainCtrl,startCtrl,endCtrl,groupDim[len(groupDim)-1])

#Add Control over the stiffness of the IK joints
tweenJoints = getTweenJoints(ikJoints,howManyTweenJoints)
print('tweenJoints = ' + str(tweenJoints))
addStiffness(tweenJoints,mainCtrl)