
//custome build curve for spine that ensures that the middle control poin on the spine curve is located at the bottom the rib cage
//as this is going to be a crucial pivot point
select -add pelvis1|pelvis2|spine1|spine2|spine3|spine4|spine5|spine6|spine7|spine8|neck1.rotatePivot ;
ikHandle -sol ikSplineSolver -pcv false -ns 2;  OR  ikHandle -sol ikSplineSolver -ccv false -pcv false -ns 2;
select -r curve1 ;


//cluster spine curve


//setup stretchy IK for spine
select -r spine_splineIK_curve ;
arclen -ch 1;
// Result: curveInfo1 // 
rename to spine_curveInfo1

string $multiplierNode = shadingNode -asUtility multiplyDivide;//set attribute to DIVIDE
rename "multiplyDivide1" "spine_normalize_multiplyDivide1";

connectAttr -force spine_curveInfo1.arcLength spine_multiplier_multiplyDivide1.input2X;

setAttr "spine_multiplier_multiplyDivide1.input1X" spine_curveInfo1.arcLength;





//create stretchy IK connections================================================================================================================================

//last selected node will be your connector
string $sel[] = `ls -sl`;
float $howManyJoints = size($sel);//eg; 5
string $last[] = `ls -sl -tail 1`;
float $howManyNodes = ceil(($howManyJoints - 1) / 3);
int $i;
int $j;
int $whichJoint; 







//create multiply nodes 


//string $socket;

//++++++++TEMPORARY DISABLE++++++++
//for ($i = 0; $i < $howManyNodes; $i++){
//string $multiplierNode = `shadingNode -asUtility multiplyDivide`;
//rename $multiplierNode "spine_multiplier_multiplyDivide1";
//} ++++++++TEMPORARY DISABLE++++++++




string $connectorAttribute1 = ".outputX";//change this variable
string $socketAttribute1 = ".input" ;//change this variable
string $connector1 = "spine_normalize_multiplyDivide1" + $connectorAttribute1;

string $connectorAttribute2 = ".output";
string $socketAttribute2;



$whichJoint = 1;



//connect normalize node to multiply nodes
for($i = 0; $i < $howManyNodes; $i++){
	int $multiply = $i + 1;//use to select the right joint in $sel[] and "spine_multiplier_multiplyDivide" node
	
	for($j = 1; $j < 4; $j++){
		
		string $whichAxis[4] = {" ", "X", "Y", "Z"};
		
		
		string $socket1 = "spine_multiplier_multiplyDivide" + $multiply + ($socketAttribute1 + "2" + $whichAxis[$j]);
		connectAttr -force $connector1 $socket1;
		
		float $getAttr = getAttr ($sel[$whichJoint] + ".tx");
		float $setAttr = `setAttr ("spine_multiplier_multiplyDivide" + $multiply + ($socketAttribute1 + "1" + $whichAxis[$j])) $getAttr`;
		
		string $connector2 = "spine_multiplier_multiplyDivide" + $multiply + ($connectorAttribute2 + $whichAxis[$j]);
		string $socket2 = ($sel[$whichJoint] + ".tx");
		connectAttr -force $connector2 $socket2;


		$whichJoint = $whichJoint + 1;
	
		print ("$whichJoint = " + $whichJoint + "/n");
	
	}

	
	print ("$i = " + $i + "/n");

}


//connect multiply nodes to joints and normalize the translateX

================================================================================================================================




//create stretchy IK connections ARM================================================================================================================================


//last selected node will be your connector
string $sel[] = `ls -sl`;
float $howManyJoints = size($sel);//eg; 5
string $last[] = `ls -sl -tail 1`;
float $howManyNodes = ceil(($howManyJoints - 1) / 3);
int $i;
int $j;
int $whichJoint; 






//string $socket;

//++++++++TEMPORARY DISABLE++++++++
//for ($i = 0; $i < $howManyNodes; $i++){
//string $multiplierNode = `shadingNode -asUtility multiplyDivide`;
//rename $multiplierNode "IK_L_arm_multiplier_multiplyDivide1";
//}// ++++++++TEMPORARY DISABLE++++++++




string $connectorAttribute1 = ".outColorR";//change this variable
string $socketAttribute1 = ".input" ;//change this variable
string $connector1 = "IK_L_arm_condition1" + $connectorAttribute1;

string $connectorAttribute2 = ".output";




$whichJoint = 1;



//connect normalize node to multiply nodes
for($i = 0; $i < $howManyNodes; $i++){
	int $multiply = $i + 1;//use to select the right joint in $sel[] and "spine_multiplier_multiplyDivide" node
	
	for($j = 1; $j < 4; $j++){
		
		string $whichAxis[4] = {" ", "X", "Y", "Z"};
		
		
		string $socket1 = "IK_L_arm_multiplier_multiplyDivide" + $multiply + ($socketAttribute1 + "2" + $whichAxis[$j]);
		connectAttr -force $connector1 $socket1;
		
		float $getAttr = getAttr ($sel[$whichJoint] + ".tx");
		float $setAttr = `setAttr ("IK_L_arm_multiplier_multiplyDivide" + $multiply + ($socketAttribute1 + "1" + $whichAxis[$j])) $getAttr`;
		
		string $connector2 = "IK_L_arm_multiplier_multiplyDivide" + $multiply + ($connectorAttribute2 + $whichAxis[$j]);
		string $socket2 = ($sel[$whichJoint] + ".tx");
		connectAttr -force $connector2 $socket2;


		$whichJoint = $whichJoint + 1;
	
		print ("$whichJoint = " + $whichJoint + "/n");
	
	}

	
	print ("$i = " + $i + "/n");

}
================================================================================================================================


//Stretchy DEFORM joints================================================================================================================================

//last selected node will be your connector
string $sel[] = `ls -sl`;
float $howManyJoints = size($sel);//eg; 5
string $last[] = `ls -sl -tail 1`;
float $howManyNodes = ceil(($howManyJoints - 1) / 3);
int $i;
int $j;
int $whichJoint; 







//++++++++TEMPORARY DISABLE++++++++
for ($i = 0; $i < $howManyNodes; $i++){
string $multiplierNode = `shadingNode -asUtility multiplyDivide`;
rename $multiplierNode "SPL_L_arm_multiplier_multiplyDivide1";
}// ++++++++TEMPORARY DISABLE++++++++


string $connectorAttribute1 = ".output";//change this variable
string $socketAttribute1 = ".input" ;//change this variable
string $connector1 = "SPL_L_arm_normalize_multiplyDivide1" + $connectorAttribute1 + "X";






$whichJoint = 1;



//connect normalize node to multiply nodes
for($i = 0; $i < $howManyNodes; $i++){
	int $multiply = $i + 1;//use to select the right joint in $sel[] and "spine_multiplier_multiplyDivide" node
	
	for($j = 1; $j < 4; $j++){
		
		string $whichAxis[4] = {" ", "X", "Y", "Z"};
		
		string $socket1 = "SPL_L_arm_multiplier_multiplyDivide" + $multiply + ($socketAttribute1 + "2" + $whichAxis[$j]);
		connectAttr -force $connector1 $socket1;
		
				
		float $getAttr = getAttr ($sel[$whichJoint] + ".tx");
		float $setAttr = `setAttr ("SPL_L_arm_multiplier_multiplyDivide" + $multiply + ($socketAttribute1 + "1" + $whichAxis[$j])) $getAttr`;
		
		string $connector2 = "SPL_L_arm_multiplier_multiplyDivide" + $multiply + ($connectorAttribute1 + $whichAxis[$j]);
		string $socket2 = ($sel[$whichJoint] + ".tx");
		connectAttr -force $connector2 $socket2;


		$whichJoint = $whichJoint + 1;
	
		print ("$whichJoint = " + $whichJoint + "/n");
	
	}

	
	print ("$i = " + $i + "/n");

}

================================================================================================================================



//Index Finger================================================================================================================================
string $sel[] = `ls -sl`;//select contol last and select joint on first
float $howManyJoints = size($sel);//eg; 5
string $last[] = `ls -sl -tail 1`;
================================================================================================================================




//NOT REQUIRED-----------> string $deform[] = {"DEFORM_L_shoulder", "DEFORM_L_upperArm1", "DEFORM_L_upperArm2", "DEFORM_L_elbow", "DEFORM_L_foreArm1", "DEFORM_L_foreArm2", "DEFORM_L_wrist"};
string $IK[] = {"IK_L_shoulder", "IK_L_upperArm1", "IK_L_upperArm2", "IK_L_elbow", "IK_L_foreArm1", "IK_L_foreArm2", "IK_L_wrist"};
string $FK[] = {"FK_L_shoulder", "FK_L_upperArm1", "FK_L_upperArm2", "FK_L_elbow", "FK_L_foreArm1", "FK_L_foreArm2", "FK_L_wrist"};
float $howManyJoints = size($deform);
string $groupNode = "L_arm_clusterGRP";
int $offset;
int $i;

for($i = 0; $i < $howManyJoints; $i++){
	$offset = $i + 1;
	string $parentIK[] = `parentConstraint -mo $IK[$i] ($groupNode + $offset)` ;
	string $parentFK[] = `parentConstraint -mo $FK[$i] ($groupNode + $offset)` ;
}






//CREATE ARM Rotation OFFSETS======================================================

//last selected node will be your connector
//select the DEFORM joints to be connected. SELECT THE WRIST FIRST THEN THE SHOULDER
string $sel[] = `ls -sl`;
float $howManyJoints = size($sel);//eg; 5
string $last[] = `ls -sl -tail 1`;
float $howManyNodes = ceil($howManyJoints / 3);

int $i;
int $j;
int $whichJoint; 


//ensure that the controllers are created
string $IKwristCtrl = "IK_L_CTRL_wrist";
string $FKwristCtrl = "FK_L_CTRL_wrist";


string $IKrotateMultiply = "IK_L_arm_rotator_multiplyDivide";
string $FKrotateMultiply = "FK_L_arm_rotator_multiplyDivide";
string $IKFKrotateBlend =  "IKFK_L_arm_blend";
string $armTweak_AV = "L_armTweak_AV";



//create multiply and blend nodes 

for ($i = 0; $i < $howManyNodes; $i++){

	string $multiplierNode = `shadingNode -n ($IKrotateMultiply + "1") -asUtility multiplyDivide`;
	string $multiplierNode = `shadingNode -n ($FKrotateMultiply + "1") -asUtility multiplyDivide`;
	string $multiplierNode = `shadingNode -n ($IKFKrotateBlend + "1") -asUtility blendColors`;


	//Connect Multiple nodes to blend
	int $offset = $i + 1;
	string $whichAxis[3] = {"X", "Y", "Z"};
	string $whichColour[3] = {"R", "B", "G"};


	string $IKconnector = $IKrotateMultiply + $offset + ".output" + $whichAxis[$i];
	string $FKconnector = $FKrotateMultiply + $offset + ".output" + $whichAxis[$i];
	string $IKsocket = $IKFKrotateBlend + $offset + ".color1" + $whichColour[$i];//IK
	string $FKsocket = $IKFKrotateBlend + $offset + ".color2" + $whichColour[$i];//FK
		
	connectAttr -force $IKconnector $IKsocket;
	connectAttr -force $FKconnector $FKsocket;


	
	//connect IK wrist control to Multiply nodes
	//int $offset = $i + 1;
	//string $whichAxis[3] = {"X", "Y", "Z"};

	/*for($j = 0; $j < $howManyNodes; $j++){
		
		
		string $IKsocket = $IKrotateMultiply + $offset + ".input1" + $whichAxis[$j];
		string $FKsocket = $FKrotateMultiply + $offset + ".input1" + $whichAxis[$j];

		string $IKconnector = $IKwristCtrl + ".rotateX";
		string $FKconnector = $FKwristCtrl + ".rotateX";

		

		connectAttr -force $IKconnector $IKsocket;
		connectAttr -force $FKconnector $FKsocket;


		//string $


	*/}
}

//connect blends to the L_armTweak_AV
for($i = 0; $i < $howManyNodes; $i++){








}






string $connectorAttribute1 = ".outColorR";//change this variable
string $socketAttribute1 = ".input" ;//change this variable
string $connector1 = "IK_L_arm_condition1" + $connectorAttribute1;

string $connectorAttribute2 = ".output";




$whichJoint = 1;



//connect normalize node to multiply nodes
for($i = 0; $i < $howManyNodes; $i++){
	int $multiply = $i + 1;//use to select the right joint in $sel[] and "spine_multiplier_multiplyDivide" node
	
	for($j = 1; $j < 4; $j++){
		
		string $whichAxis[4] = {" ", "X", "Y", "Z"};
		
		
		string $socket1 = "IK_L_arm_multiplier_multiplyDivide" + $multiply + ($socketAttribute1 + "2" + $whichAxis[$j]);
		connectAttr -force $connector1 $socket1;
		
		float $getAttr = getAttr ($sel[$whichJoint] + ".tx");
		float $setAttr = `setAttr ("IK_L_arm_multiplier_multiplyDivide" + $multiply + ($socketAttribute1 + "1" + $whichAxis[$j])) $getAttr`;
		
		string $connector2 = "IK_L_arm_multiplier_multiplyDivide" + $multiply + ($connectorAttribute2 + $whichAxis[$j]);
		string $socket2 = ($sel[$whichJoint] + ".tx");
		connectAttr -force $connector2 $socket2;


		$whichJoint = $whichJoint + 1;
	
		print ("$whichJoint = " + $whichJoint + "/n");
	
	}

	
	print ("$i = " + $i + "/n");

}
================================================================================================================================