//START++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

//create stretchy SPLINE IK LEG connections================================================================================================================================
//INSTRUCTIONS;
//1.Select all the joints that make up the spine Ik group except the very first joint as this is not be stretched and then select the spline IK curve LAST



//START OF SCRIPT
string $sel[] = `ls -sl`;
float $howManyJoints = (size($sel) -1);//eg; 5
string $last[] = `ls -sl -tail 1`;
float $howManyNodes = ceil($howManyJoints / 3);
//print $howManyNodes;
int $i;
int $j;
int $whichJoint; 
int $break = 0;
//int $countJoints = 1;

string $sidePrefix = "L_";

string $prefix = $sidePrefix + "leg_";

string $spineNormaliseNode = $prefix + "spline_normalize_multiplyDivide1";
string $spineMultiplyNode = $prefix + "spline_multiplier_multiplyDivide";
string $curveInfo = $prefix + "spline_curveInfo1";


//START////////////////////////////////////////////////////////////////////////////////////CREATE CURVE INFO NODE FOR CHAR SPINE 
//CREATE CURVE INFO AND MULTIPLYDIVIDE NODES
string $curveInfoNode = `arclen -ch on $last[0]`;
string $multiplierNode = `shadingNode -n $spineNormaliseNode -asUtility multiplyDivide`;

$spineNormaliseNode = $multiplierNode;//ENSURE THAT THERE CONTINUITY THROUGH OUT THE SCRIPT


//CONNECT ARCLENGTH TO INPUT1X 
string $socketAttribute = ".input1X" ;
string $connectorAttribute = ".arcLength";

string $connector = $curveInfoNode + $connectorAttribute;
string $socket = $multiplierNode + $socketAttribute;

connectAttr -force $connector $socket;


//SET INPUT2X TO ARCLENGTH VALUE AND SET MULTIPLEDIVED NODES OPERATION TO DIVIDE
$socketAttribute = ".input2X";

setAttr ($multiplierNode + ".operation") 2;
float $arcLength = `getAttr $connector`;

setAttr ($multiplierNode + $socketAttribute) $arcLength;


rename $curveInfoNode $curveInfo;


//END/////////////////////////////////////////////////////////////////////////////////////CREATE CURVE INFO NODE FOR CHAR SPINE 


//START///////////////////////////////////////////////////////////////////////////////////CREATE MULTIPLYDIVIDE NODES TO BE CONNECTED TO THE INDIVIDUAL JOINTS TRANSLATEX 

//CREATE MULTIPLYDIVIDE NODES 
for ($i = 0; $i < $howManyNodes; $i++){
string $multiplierNode = `shadingNode -n ($spineMultiplyNode + "1") -asUtility multiplyDivide`;
} 


string $connectorAttribute1 = ".outputX";//change this variable
string $socketAttribute1 = ".input" ;//change this variable
string $connector1 = $spineNormaliseNode + $connectorAttribute1;

string $connectorAttribute2 = ".output";
string $socketAttribute2;

$whichJoint = 0;



//CONNECT THE NORMALISE NODE TO THE MULTIPLYDIVIDE NODES, COPY SPINE JOINT TRANSLATEX TO MULTIPLYDIVIDE NODES INPUT 1XYZ ATTRIBUTES AND 
//CONNECT MULTIPLYDIVIDE NODES OUTPUT XYZ TO SPINE JOINT TRANSLATEX
for($i = 0; $i < $howManyNodes; $i++){
	int $multiply = $i + 1;
	
	for($j = 1; $j < 4; $j++){
		if($break == 0){
			string $whichAxis[4] = {" ", "X", "Y", "Z"};
		
		
			string $socket1 = $spineMultiplyNode + $multiply + ($socketAttribute1 + "2" + $whichAxis[$j]);
			connectAttr -force $connector1 $socket1;
		
			float $getAttr = getAttr ($sel[$whichJoint] + ".tx");
			float $setAttr = `setAttr ($spineMultiplyNode + $multiply + ($socketAttribute1 + "1" + $whichAxis[$j])) $getAttr`;
		
			string $connector2 = $spineMultiplyNode + $multiply + ($connectorAttribute2 + $whichAxis[$j]);
			string $socket2 = ($sel[$whichJoint] + ".tx");
			connectAttr -force $connector2 $socket2;


			$whichJoint = $whichJoint + 1;
			 
	
			print ("$whichJoint = " + $whichJoint + "/n");
			print ("$howManyJoints = " + $howManyJoints + "/n");

			//LOOP BREAK TO CATER FOR ODD NUMBER OF JOINTS
			if($whichJoint == $howManyJoints){
				$break = 1;
			}
		}
	
	}

	
	//print ("$i = " + $i + "/n");

}


//END/////////////////////////////////////////////////////////////////////////////////////CREATE MULTIPLYDIVIDE NODES TO BE CONNECTED TO THE INDIVIDUAL JOINTS TRANSLATEX 

//================================================================================================================================
//END++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++;

//^^^^^^^^^^^^^^^-----TESTED AND WORKS-----^^^^^^^^^^^^^^^!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
