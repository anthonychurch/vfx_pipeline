//START++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//CREATE STRETCHY IK CONNECTIONS FOR THE ARM IK SETUP JOINTS=========================================================================================================================
//INSTRUCTIONS;
//1.create joints for the arms IK setup. eg; L_IK_shoulder, L_IK_humerus1, L_IK_humerus2, L_IK_humerus3, L_IK_elbow..................
//2.select all the joints starting with the second from the top of the IK chain to the end joint, then select the IK_wrist_CTRL node

string $sel[] = `ls -sl`;
float $howManyJoints = size($sel)-1;//eg; 5
string $last[] = `ls -sl -tail 1`;
float $howManyNodes = ceil(($howManyJoints) / 3);
int $i;
int $j;
int $whichJoint; 
int $break = 0;

string $multiplierNodes[];

string $sidePrefix = "L_";

string $FKprefix = $sidePrefix + "FK_";

string $prefix = $IKprefix + "arm_";

string $stretchFKAttr = ".stretchFK";
string $stretchFKNode = $prefix + "stretchFK_setRange";


string $IKMultiplierNode = $prefix + "FKmultiplier_multiplyDivide1";




string $CTRL = $last[0];

string $startCTRL = $IKprefix + "shoulder_LOC"; 
string $endCTRL = $IKprefix + "wrist_CTRL"; 

string $startJoint = $sidePrefix + "shoulder";
string $endJoint = $sidePrefix + "wrist";

string $startLoc[] = `spaceLocator -n ($prefix + "start_dim_LOC") -p 0 0 0`;
string $endLoc[] = `spaceLocator -n ($prefix + "end_dim_LOC") -p 0 0 0`;

move 2 0 0 $endLoc[0];
move 1 0 0 $startLoc[0];

float $startJointPosX = `getAttr ($startLoc[0] + ".translateX")`;
float $startJointPosY = `getAttr ($startLoc[0] + ".translateY")`;
float $startJointPosZ = `getAttr ($startLoc[0] + ".translateZ")`;
float $endJointPosX = `getAttr ($endLoc[0] + ".translateX")`;
float $endJointPosY = `getAttr ($endLoc[0] + ".translateY")`;
float $endJointPosZ = `getAttr ($endLoc[0] + ".translateZ")`;

string $distanceNode1 = `distanceDimension  -sp $startJointPosX $startJointPosY $startJointPosZ -ep $endJointPosX $endJointPosY $endJointPosZ` ;
string $distanceTrans[] = `listRelatives -p $distanceNode1`;
string $name = `rename $distanceTrans[0] $distanceName`;
$distanceName = $name;

string $startParent[] = `parentConstraint $startJoint $startLoc[0]`;
delete $startParent[0];

string $endParent[] = `parentConstraint $endJoint $endLoc[0]`;
delete $endParent[0];

string $startParent[] = `parent -a $startLoc[0] $startCTRL `;
string $endParent[] = `parent -a $endLoc[0] $endCTRL `;


//START///////////////////////////////////CREATE CONDITION, NORMALISE MULTIPLYDIVIDE NODE AND 
//START///////////////////////////////////CONNECT THE DISTANCE NODES DISTANCE ATTRIBUTE TO NORMALISE MULTIPLYDIVIDE NODES INPUT1X 
//START///////////////////////////////////CONNECT THE NORMALISE MULTIPLYDIVIDE NODES OUPUTX TO 1st TERM OF CONDITION NODE


//create set range node to normalise the stretch IK attribute*********************START**********create set range node to normalise the stretch IK attribute
string $setRangeNode = `shadingNode -n $stretchFKNode -asUtility setRange`;
string $connector = $CTRL + $stretchIKAttr;
string $socket = $setRangeNode + ".valueX";
connectAttr -force $connector $socket;

setAttr ($setRangeNode + ".oldMaxX") 10;
setAttr ($setRangeNode + ".maxX") 1;
//create set range node to normalise the stretch IK attribute*********************END**********create set range node to normalise the stretch IK attribute


//CREATE NORMALISE MULTIPLYDIVIDE NODE************************************************************START**********CREATE NORMALISE MULTIPLYDIVIDE NODE
string $normaliseNode = `shadingNode -n ($IKNormaliseNode + "1") -asUtility multiplyDivide`;

string $connector = $distanceName + ".distance";
string $socket = $normaliseNode + ".input1X";

connectAttr -force $connector $socket;

//CREATE NORMALISE MULTIPLYDIVIDE NODE************************************************************END**********CREATE NORMALISE MULTIPLYDIVIDE NODE

//SET INPUT2X TO DISTANCE VALUE AND SET **************************************************************START**********SET INPUT2X TO DISTANCE VALUE AND SET 
//MULTIPLYDIVIDE NODES OPERATION TO DIVIDE************************************************************START**********MULTIPLYDIVIDE NODES OPERATION TO DIVIDE
$socketAttribute = ".input2X";

setAttr ($normaliseNode + ".operation") 2;
float $distance = `getAttr $connector`;
print ("$distance = " + $distance + ";     ");

setAttr ($normaliseNode + $socketAttribute) $distance;
//set Normalise nodes Z output to 1; ie 1 / 1 = 1. This will be connected to $stretch input 1R
setAttr ($normaliseNode + ".input1Z") 1;
setAttr ($normaliseNode + ".input2Z") 1;

//SET INPUT2X TO DISTANCE VALUE AND SET **************************************************************END**********SET INPUT2X TO DISTANCE VALUE AND SET 
//MULTIPLYDIVIDE NODES OPERATION TO DIVIDE************************************************************END**********MULTIPLYDIVIDE NODES OPERATION TO DIVIDE


//CREATE STRETCH ON AND OFF NODE**************************************************************START*******************CREATE STRETCH ON AND OFF NODE
string $stretch = `shadingNode -n ($IKStretchNode + "1") -asUtility blendColors`;
string $socket = $stretch + ".color2R";
string $connector = $normaliseNode + ".outputZ";
connectAttr -force $connector $socket;

string $socket = $stretch + ".color1R";
string $connector = $normaliseNode + ".outputX";
connectAttr -force $connector $socket;

//connect $setRangeNode .outpUtX to $stretch blend input
string $socket = $stretch + ".blender";
string $connector = $setRangeNode + ".outValueX";
connectAttr -force $connector $socket;

//CREATE STRETCH ON AND OFF NODE**************************************************************END*******************CREATE STRETCH ON AND OFF NODE


//CREATE CONDITION NODE AND CONNECT NORMALISE ********************************************START********CREATE CONDITION NODE AND CONNECT NORMALISE 
//MULTIPLYDIVIDE NODES OUPUTX TO 1st TERM OF CONDITION NODE*******************************START********MULTIPLYDIVIDE NODES OUPUTX TO 1st TERM OF CONDITION NODE
string $conditionNode = `shadingNode -n ($IKConditionNode + "1") -asUtility condition`;
string $socket = $conditionNode + ".firstTerm";
string $connector = $normaliseNode + ".outputX";  

connectAttr -force $connector $socket;

setAttr ($conditionNode + ".operation") 4;//LESS THAN
setAttr ($conditionNode + ".secondTerm") 1;
setAttr ($conditionNode + ".colorIfTrueR") 1;

//CONNECT NORMALISE MULTIPLYDIVIDE NODES OUPUTX TO ".colorIfFalseR" OF CONDITION NODE
string $socket = $conditionNode + ".colorIfFalseR";
string $connector = $stretch + ".outputR";   

connectAttr -force $connector $socket;

//CREATE CONDITION NODE AND CONNECT NORMALISE ********************************************END********REATE CONDITION NODE AND CONNECT NORMALISE 
//MULTIPLYDIVIDE NODES OUPUTX TO 1st TERM OF CONDITION NODE*******************************END********MULTIPLYDIVIDE NODES OUPUTX TO 1st TERM OF CONDITION NODE



//CREATE AUTO STETCH ON AND OFF NODE********************************************START********CREATE AUTO STETCH ON AND OFF NODE

//connect waist CTRL auto switch to the first term
string $connector = $CTRL + $autoSwitchAttr;
string $socket = $setRangeNode + ".valueY";
connectAttr -force $connector $socket;

setAttr ($setRangeNode + ".oldMaxY") 10;
setAttr ($setRangeNode + ".maxY") 1;


string $autoStretch = `shadingNode -n ($IKAutoStretchNode + "1") -asUtility blendColors`;
string $socket = $autoStretch + ".blender";//waist CTRL attribute auto stretch via set Range
string $connector = $setRangeNode + ".outValueY";  
connectAttr -force $connector $socket;

//from auto stretch condition node;  $conditionNode 
string $socket = $autoStretch + ".color1R";
string $connector = $conditionNode + ".outColorR";
connectAttr -force $connector $socket;

//from stretch  node;  $stretch 
string $socket = $autoStretch + ".color2R";
string $connector = $stretch + ".outputR";
connectAttr -force $connector $socket;
//CREATE AUTO STETCH ON AND OFF NODE********************************************END********CREATE AUTO STETCH ON AND OFF NODE




$IKConditionNode = $conditionNode;
$IKNormaliseNode = $normaliseNode;
$IKAutoStretchNode = $autoStretch;
$IKStretchNode = $stretch;
$stretchNormaliseNode = $setRangeNode;


//END///////////////////////////////////CREATE CONDITION, NORMALISE MULTIPLYDIVIDE NODE AND 
//END///////////////////////////////////CONNECT THE DISTANCE NODES DISTANCE ATTRIBUTE TO NORMALISE MULTIPLYDIVIDE NODES INPUT1X 
//END///////////////////////////////////CONNECT THE NORMALISE MULTIPLYDIVIDE NODES OUPUTX TO 1st TERM OF CONDITION NODE

//??????????????????????????THIS IS REDUNDANT??????????????????????????????
//START/////////////////////////////////////////////////////////////CREATE LIMITER MULTIPLYDIVIDE NODE
string $limiterNode = `shadingNode -n ($IKScaleLimiterNode + "1") -asUtility multiplyDivide`;
string $connectorAttribute = ".outputR";//change this variable
string $socketAttribute = ".input1X" ;//change this variable

string $connector = $autoStretch + $connectorAttribute;
string $socket = $limiterNode + $socketAttribute;

setAttr ($limiterNode + ".input2X") 1;

connectAttr -force $connector $socket;

$IKScaleLimiterNode = $limiterNode;
//END//////////////////////////////////////////////////////////////CREATE LIMITER MULTIPLYDIVIDE NODE
//??????????????????????????THIS IS REDUNDANT??????????????????????????????


//START/////////////////////////////////////////////////////////////MULTIPLIER NODES READY TO BE CONNECT RO IK JOINT TRANSLATEX
for ($i = 0; $i < $howManyNodes; $i++){
string $multiplierNode = `shadingNode -n ($IKMultiplierNode + "1") -asUtility multiplyDivide`;
$multiplierNodes[$i] = $multiplierNode;

}
//END///////////////////////////////////////////////////////////////MULTIPLIER NODES READY TO BE CONNECT RO IK JOINT TRANSLATEX





//START/////////////////////////////////////////////////////////////CONNECT THE CONDITION NODE TO MULTIPLIER NODES READY TO BE CONNECT TO IK JOINT TRANSLATEX
string $connectorAttribute1 = ".outputX";//change this variable
string $socketAttribute1 = ".input" ;//change this variable
string $connector1 = $IKScaleLimiterNode + $connectorAttribute1;

string $connectorAttribute2 = ".output";




$whichJoint = 0;



//CONNECT CONDITION NODE TO MULYIPLIER NODES
for($i = 0; $i < $howManyNodes; $i++){
	int $multiply = $i + 1;//use to select the right joint in $sel[] and "spine_multiplier_multiplyDivide" node
	
	for($j = 1; $j < 4; $j++){
		if($break == 0){
		
			string $whichAxis[4] = {" ", "X", "Y", "Z"};
		
		
			string $socket1 = $multiplierNodes[$i] + ($socketAttribute1 + "2" + $whichAxis[$j]);//$IKMultiplierNode + $multiply + ($socketAttribute1 + "2" + $whichAxis[$j]);
			connectAttr -force $connector1 $socket1;
		
			float $getAttr = getAttr ($sel[$whichJoint] + ".tx");
			//float $setAttr = `setAttr ($IKMultiplierNode + $multiply + ($socketAttribute1 + "1" + $whichAxis[$j])) $getAttr`;
			float $setAttr = `setAttr ($multiplierNodes[$i] + ($socketAttribute1 + "1" + $whichAxis[$j])) $getAttr`;
		
			string $connector2 = $IKMultiplierNode + $multiply + ($connectorAttribute2 + $whichAxis[$j]);
			string $socket2 = ($sel[$whichJoint] + ".tx");
			connectAttr -force $connector2 $socket2;


			$whichJoint = $whichJoint + 1;
	
			print ("$whichJoint = " + $whichJoint + "/n");
			print ("$howManyJoints = " + $howManyJoints + "/n");

			//LOOP BREAK TO CATER FOR ODD NUMBER OF JOINTS
			if($whichJoint == ($howManyJoints)){
				$break = 1;
			}
		}
	
	}

	
	print ("$i = " + $i + "/n");

}
//END//////////////////////////////////////////////////////////////CONNECT THE CONDITION NODE TO MULTIPLIER NODES READY TO BE CONNECT TO IK JOINT TRANSLATEX
//================================================================================================================================
//END++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

//^^^^^^^^^^^^^^^-----TESTED AND WORKS-----^^^^^^^^^^^^^^^!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!