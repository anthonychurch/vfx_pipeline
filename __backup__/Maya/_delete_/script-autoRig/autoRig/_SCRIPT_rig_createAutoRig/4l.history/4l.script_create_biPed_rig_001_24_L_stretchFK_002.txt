//START++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//CREATE STRETCHY IK CONNECTIONS FOR THE ARM IK SETUP JOINTS=========================================================================================================================
//INSTRUCTIONS;
//1.create joints for the arms IK setup. eg; L_IK_shoulder, L_IK_humerus1, L_IK_humerus2, L_IK_humerus3, L_IK_elbow..................
//2.select all the joints starting with the second from the top of the IK chain to the end joint, then select the IK_wrist_CTRL node

string $sel[] = `ls -sl`;
float $howManyJoints = size($sel)-1;//eg; 5
string $last[] = `ls -sl -tail 1`;
float $howManyNodes = ceil(($howManyJoints) / 3);
int $i;
int $j;
int $whichJoint; 
int $break = 0;

string $multiplierNodes[];

string $sidePrefix = "L_";

string $FKprefix = $sidePrefix + "FK_";

string $prefix = $IKprefix + "arm_";

string $stretchFKAttr = ".stretchFK";
string $stretchFKNode = $prefix + "stretchFK_setRange";
string $midCTRL = $FKprefix + elbow_CTRL;


string $IKMultiplierNode = $prefix + "FKmultiplier_multiplyDivide1";




string $CTRL = $last[0];

string $startCTRL = $IKprefix + "shoulder_LOC"; 
string $endCTRL = $IKprefix + "wrist_CTRL"; 

string $startJoint = $sidePrefix + "shoulder";
string $endJoint = $sidePrefix + "wrist";

string $startLoc[] = `spaceLocator -n ($prefix + "start_dim_LOC") -p 0 0 0`;
string $endLoc[] = `spaceLocator -n ($prefix + "end_dim_LOC") -p 0 0 0`;

move 2 0 0 $endLoc[0];
move 1 0 0 $startLoc[0];

float $startJointPosX = `getAttr ($startLoc[0] + ".translateX")`;
float $startJointPosY = `getAttr ($startLoc[0] + ".translateY")`;
float $startJointPosZ = `getAttr ($startLoc[0] + ".translateZ")`;
float $endJointPosX = `getAttr ($endLoc[0] + ".translateX")`;
float $endJointPosY = `getAttr ($endLoc[0] + ".translateY")`;
float $endJointPosZ = `getAttr ($endLoc[0] + ".translateZ")`;

string $distanceNode1 = `distanceDimension  -sp $startJointPosX $startJointPosY $startJointPosZ -ep $endJointPosX $endJointPosY $endJointPosZ` ;
string $distanceTrans[] = `listRelatives -p $distanceNode1`;
string $name = `rename $distanceTrans[0] $distanceName`;
$distanceName = $name;

string $startParent[] = `parentConstraint $startJoint $startLoc[0]`;
delete $startParent[0];

string $endParent[] = `parentConstraint $endJoint $endLoc[0]`;
delete $endParent[0];

string $startParent[] = `parent -a $startLoc[0] $startCTRL `;
string $endParent[] = `parent -a $endLoc[0] $endCTRL `;


//START///////////////////////////////////CREATE CONDITION, NORMALISE MULTIPLYDIVIDE NODE AND 
//START///////////////////////////////////CONNECT THE DISTANCE NODES DISTANCE ATTRIBUTE TO NORMALISE MULTIPLYDIVIDE NODES INPUT1X 
//START///////////////////////////////////CONNECT THE NORMALISE MULTIPLYDIVIDE NODES OUPUTX TO 1st TERM OF CONDITION NODE


//create set range node to normalise the stretch IK attribute*********************START**********create set range node to normalise the stretch IK attribute
string $setRangeNode = `shadingNode -n $stretchFKNode -asUtility setRange`;
string $connector = $midCTRL + $stretchFKAttr;
string $socket = $setRangeNode + ".valueX";
connectAttr -force $connector $socket;

setAttr ($setRangeNode + ".oldMaxX") 1000;
setAttr ($setRangeNode + ".maxX") 100;
//create set range node to normalise the stretch IK attribute*********************END**********create set range node to normalise the stretch IK attribute







$whichJoint = 0;



//CONNECT CONDITION NODE TO MULYIPLIER NODES
for($i = 0; $i < $howManyNodes; $i++){
	int $multiply = $i + 1;//use to select the right joint in $sel[] and "spine_multiplier_multiplyDivide" node
	
	for($j = 1; $j < 4; $j++){
		if($break == 0){
		
			string $whichAxis[4] = {" ", "X", "Y", "Z"};
		
		
			string $socket1 = $multiplierNodes[$i] + ($socketAttribute1 + "2" + $whichAxis[$j]);//$IKMultiplierNode + $multiply + ($socketAttribute1 + "2" + $whichAxis[$j]);
			connectAttr -force $connector1 $socket1;
		
			float $getAttr = getAttr ($sel[$whichJoint] + ".tx");
			//float $setAttr = `setAttr ($IKMultiplierNode + $multiply + ($socketAttribute1 + "1" + $whichAxis[$j])) $getAttr`;
			float $setAttr = `setAttr ($multiplierNodes[$i] + ($socketAttribute1 + "1" + $whichAxis[$j])) $getAttr`;
		
			string $connector2 = $IKMultiplierNode + $multiply + ($connectorAttribute2 + $whichAxis[$j]);
			string $socket2 = ($sel[$whichJoint] + ".tx");
			connectAttr -force $connector2 $socket2;


			$whichJoint = $whichJoint + 1;
	
			print ("$whichJoint = " + $whichJoint + "/n");
			print ("$howManyJoints = " + $howManyJoints + "/n");

			//LOOP BREAK TO CATER FOR ODD NUMBER OF JOINTS
			if($whichJoint == ($howManyJoints)){
				$break = 1;
			}
		}
	
	}

	
	print ("$i = " + $i + "/n");

}
//END//////////////////////////////////////////////////////////////CONNECT THE CONDITION NODE TO MULTIPLIER NODES READY TO BE CONNECT TO IK JOINT TRANSLATEX
//================================================================================================================================
//END++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

//^^^^^^^^^^^^^^^-----TESTED AND WORKS-----^^^^^^^^^^^^^^^!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!