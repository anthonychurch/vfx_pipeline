//START++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//CREATE STRETCHY IK CONNECTIONS FOR THE ARM IK SETUP JOINTS=========================================================================================================================
//INSTRUCTIONS;
//1.create joints for the arms IK setup. eg; L_IK_shoulder, L_IK_humerus1, L_IK_humerus2, L_IK_humerus3, L_IK_elbow..................
//2.create a distance node and point constrain the its locator to the IK shoulder and IK wrist controls
//3.select all the joints starting with the wrist and excluding the shoulder joint, then select the distance node LAST



string $sel[] = `ls -sl`;
float $howManyJoints = size($sel);//eg; 5
string $last[] = `ls -sl -tail 1`;
float $howManyNodes = ceil(($howManyJoints - 1) / 3);
int $i;
int $j;
int $whichJoint; 
int $break = 0;

string $sidePrefix = "L_";

string $prefix = $sidePrefix + "IK_arm_";

string $IKNormaliseNode = $prefix + "normalize_multiplyDivide";
string $IKMultiplierNode = $prefix + "multiplier_multiplyDivide";
string $IKConditionNode = $prefix + "condition";
string $IKScaleLimiterNode = $prefix + "limit_multiplyDivide";



//START///////////////////////////////////CREATE CONDITION, NORMALISE MULTIPLYDIVIDE NODE AND 
//START///////////////////////////////////CONNECT THE DISTANCE NODES DISTANCE ATTRIBUTE TO NORMALISE MULTIPLYDIVIDE NODES INPUT1X 
//START///////////////////////////////////CONNECT THE NORMALISE MULTIPLYDIVIDE NODES OUPUTX TO 1st TERM OF CONDITION NODE


//CREATE NORMALISE MULTIPLYDIVIDE NODE
string $normaliseNode = `shadingNode -n ($IKNormaliseNode + "1") -asUtility multiplyDivide`;

string $connector = $last[0] + ".distance";
string $socket = $normaliseNode + ".input1X";

connectAttr -force $connector $socket;


//SET INPUT2X TO DISTANCE VALUE AND SETMULTIPLYDIVIDE NODES OPERATION TO DIVIDE
$socketAttribute = ".input2X";

setAttr ($normaliseNode + ".operation") 2;
float $distance = `getAttr $connector`;

setAttr ($normaliseNode + $socketAttribute) ($distance + 1);//ADD 1 TO THE NORMALISE INPUT2X TO LIMIT THE SCALE


//CREATE CONDITION NODE AND CONNECT NORMALISE MULTIPLYDIVIDE NODES OUPUTX TO 1st TERM OF CONDITION NODE
string $conditionNode = `shadingNode -n ($IKConditionNode + "1") -asUtility condition`;
string $socket = $conditionNode + ".firstTerm";
string $connector = $normaliseNode + ".outputX";  

connectAttr -force $connector $socket;

setAttr ($conditionNode + ".operation") 4;//LESS THAN
setAttr ($conditionNode + ".secondTerm") 1;
setAttr ($conditionNode + ".colorIfTrueR") 1;


//CONNECT NORMALISE MULTIPLYDIVIDE NODES OUPUTX TO ".colorIfTrueR" OF CONDITION NODE
string $socket = $conditionNode + ".colorIfFalseR";
string $connector = $normaliseNode + ".outputX";   

connectAttr -force $connector $socket;


$IKConditionNode = $conditionNode;
$IKNormaliseNode = $normaliseNode;

//END///////////////////////////////////CREATE CONDITION, NORMALISE MULTIPLYDIVIDE NODE AND 
//END///////////////////////////////////CONNECT THE DISTANCE NODES DISTANCE ATTRIBUTE TO NORMALISE MULTIPLYDIVIDE NODES INPUT1X 
//END///////////////////////////////////CONNECT THE NORMALISE MULTIPLYDIVIDE NODES OUPUTX TO 1st TERM OF CONDITION NODE

//??????????????????????????THIS IS REDUNDANT??????????????????????????????
//START/////////////////////////////////////////////////////////////CREATE LIMITER MULTIPLYDIVIDE NODE
string $limiterNode = `shadingNode -n ($IKScaleLimiterNode + "1") -asUtility multiplyDivide`;
string $connectorAttribute = ".outColorR";//change this variable
string $socketAttribute = ".input1X" ;//change this variable

string $connector = $IKConditionNode + $connectorAttribute;
string $socket = $limiterNode + $socketAttribute;

setAttr ($limiterNode + ".input2X") 1;

connectAttr -force $connector $socket;

$IKScaleLimiterNode = $limiterNode;
//END//////////////////////////////////////////////////////////////CREATE LIMITER MULTIPLYDIVIDE NODE
//??????????????????????????THIS IS REDUNDANT??????????????????????????????


//START/////////////////////////////////////////////////////////////MULTIPLIER NODES READY TO BE CONNECT RO IK JOINT TRANSLATEX
for ($i = 0; $i < $howManyNodes; $i++){
string $multiplierNode = `shadingNode -n ($IKMultiplierNode + "1") -asUtility multiplyDivide`;

}
//END///////////////////////////////////////////////////////////////MULTIPLIER NODES READY TO BE CONNECT RO IK JOINT TRANSLATEX





//START/////////////////////////////////////////////////////////////CONNECT THE CONDITION NODE TO MULTIPLIER NODES READY TO BE CONNECT TO IK JOINT TRANSLATEX
string $connectorAttribute1 = ".outputX";//change this variable
string $socketAttribute1 = ".input" ;//change this variable
string $connector1 = $IKScaleLimiterNode + $connectorAttribute1;

string $connectorAttribute2 = ".output";




$whichJoint = 0;



//CONNECT CONDITION NODE TO MULYIPLIER NODES
for($i = 0; $i < $howManyNodes; $i++){
	int $multiply = $i + 1;//use to select the right joint in $sel[] and "spine_multiplier_multiplyDivide" node
	
	for($j = 1; $j < 4; $j++){
		if($break == 0){
		
			string $whichAxis[4] = {" ", "X", "Y", "Z"};
		
		
			string $socket1 = $IKMultiplierNode + $multiply + ($socketAttribute1 + "2" + $whichAxis[$j]);
			connectAttr -force $connector1 $socket1;
		
			float $getAttr = getAttr ($sel[$whichJoint] + ".tx");
			float $setAttr = `setAttr ($IKMultiplierNode + $multiply + ($socketAttribute1 + "1" + $whichAxis[$j])) $getAttr`;
		
			string $connector2 = $IKMultiplierNode + $multiply + ($connectorAttribute2 + $whichAxis[$j]);
			string $socket2 = ($sel[$whichJoint] + ".tx");
			connectAttr -force $connector2 $socket2;


			$whichJoint = $whichJoint + 1;
	
			print ("$whichJoint = " + $whichJoint + "/n");
			print ("$howManyJoints = " + $howManyJoints + "/n");

			//LOOP BREAK TO CATER FOR ODD NUMBER OF JOINTS
			if($whichJoint == ($howManyJoints-1)){
				$break = 1;
			}
		}
	
	}

	
	print ("$i = " + $i + "/n");

}
//END//////////////////////////////////////////////////////////////CONNECT THE CONDITION NODE TO MULTIPLIER NODES READY TO BE CONNECT TO IK JOINT TRANSLATEX
//================================================================================================================================
//END++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

//^^^^^^^^^^^^^^^-----TESTED AND WORKS-----^^^^^^^^^^^^^^^!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!