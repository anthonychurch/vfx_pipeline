
//custome build curve for spine that ensures that the middle control poin on the spine curve is located at the bottom the rib cage
//as this is going to be a crucial pivot point
select -add pelvis1|pelvis2|spine1|spine2|spine3|spine4|spine5|spine6|spine7|spine8|neck1.rotatePivot ;
ikHandle -sol ikSplineSolver -pcv false -ns 2;  OR  ikHandle -sol ikSplineSolver -ccv false -pcv false -ns 2;
select -r curve1 ;


//cluster spine curve


//setup stretchy IK for spine
select -r spine_splineIK_curve ;
arclen -ch 1;
// Result: curveInfo1 // 
rename to spine_curveInfo1

string $multiplierNode = shadingNode -asUtility multiplyDivide;//set attribute to DIVIDE
rename "multiplyDivide1" "spine_normalize_multiplyDivide1";

connectAttr -force spine_curveInfo1.arcLength spine_multiplier_multiplyDivide1.input2X;

setAttr "spine_multiplier_multiplyDivide1.input1X" spine_curveInfo1.arcLength;





//create stretchy IK connections

//last selected node will be your connector
string $sel[] = `ls -sl`;
float $howManyJoints = size($sel);//eg; 5
string $last[] = `ls -sl -tail 1`;
float $howManyNodes = ceil(($howManyJoints - 1) / 3);
int $i;
int $j;
int $whichJoint; 







//create multiply nodes 


//string $socket;

//++++++++TEMPORARY DISABLE++++++++
//for ($i = 0; $i < $howManyNodes; $i++){
//string $multiplierNode = `shadingNode -asUtility multiplyDivide`;
//rename $multiplierNode "spine_multiplier_multiplyDivide1";
//} ++++++++TEMPORARY DISABLE++++++++




string $connectorAttribute1 = ".outputX";//change this variable
string $socketAttribute1 = ".input2" ;//change this variable
string $connector1 = "spine_normalize_multiplyDivide1" + $connectorAttribute1;

string $connectorAttribute2 = ".output";
string $socketAttribute2;



$whichJoint = 0;



//connect normalize node to multiply nodes
for($i = 0; $i < $howManyNodes; $i++){
	int $multiply = $i + 1;//use to select the right joint in $sel[] and "spine_multiplier_multiplyDivide" node
	
	for($j = 1; $j < 4; $j++){
		
		string $whichAxis[4] = {" ", "X", "Y", "Z"};
		
		
		string $socket1 = "spine_multiplier_multiplyDivide" + $multiply + ($socketAttribute1 + $whichAxis[$j]);
		connectAttr -force $connector1 $socket1;
		
		float $getAttr = `getAttr ($sel[$whichJoint] + ".tx")`;
		
		//string $connector2 = "spine_multiplier_multiplyDivide" + $multiply + ($socketAttribute2 + $whichAxis[$j]);
		//string $socket2 = ($sel[$whichJoint] + ".tx");
		//connectAttr -force $connector2 $socket2;


		//$whichJoint = $whichJoint + 1;
	
		//print ("$whichJoint = " + $whichJoint + "/n");
	
	}

	
	print ("$i = " + $i + "/n");

}


//connect multiply nodes to joints and normalize the translateX







