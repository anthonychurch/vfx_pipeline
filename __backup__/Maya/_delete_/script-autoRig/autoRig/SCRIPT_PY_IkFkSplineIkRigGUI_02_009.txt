import maya.cmds
import random
import math

#### START - Common Methods ###############################################################################################################################################################################

#### START - UI Methods     ###############################################################################################################################################################################
def deleteWindow( windowName ):
	exist = maya.cmds.window( windowName, exists=True )
	if(exist == 1):
		maya.cmds.deleteUI(windowName, window=True)
#### END   - UI Methods     ###############################################################################################################################################################################

def getWStransform(obj):
	transform = maya.cmds.xform( obj, q=True, ws=True, t=True )
	return transform

def testNodeType(node,type):
	value = True
	nodeType = maya.cmds.objectType( node )
	if( nodeType != type ):
		value = False
		#print 'WARNING:: testNodeType : ' + str(nodeType) + ' does not match ' + type + '/n'
	return value

def getWSrotate(obj):
	rotate = maya.cmds.xform( obj, q=True, ws=True, ro=True )
	return rotate

def setWStransform(obj,position):
	maya.cmds.xform( obj, ws=True, t=(position[0],position[1],position[2]) )

def setWSrotate(obj,rotate):
	maya.cmds.xform( obj, ws=True, ro=(rotate[0],rotate[1],rotate[2]) )

def findName(name,token):
	newName = name[len(token):len(name)]	
	return newName

def setupPolVector(pvCtrl,joint,distance,upAxis):
	pvGrp = pvCtrl + '_GRP'
	pos = getWStransform(joint)
	setWStransform(pvGrp,pos)
	rot = getWSrotate(joint)
	setWSrotate(pvGrp,rot)
	maya.cmds.parent(pvGrp,joint)
	maya.cmds.setAttr(pvGrp + '.t' + upAxis, distance)
	maya.cmds.parent(pvGrp,world=True)

def incrementPos(increment,value,axis):
	vector = (0,0,0)
	value = value + increment
	if(axis == 'x'):
		vector = (value,0,0)
	elif(axis == 'y'):
		vector = (0,value,0)
	else:
		vector = (0,0,value)
	return vector

def setJointOriention(obj):
	rx = maya.cmds.getAttr(str(obj) + '.rotateX')
	print('rx = ' + str(rx))
	maya.cmds.setAttr(str(obj) + '.jointOrientX', rx)
	ry = maya.cmds.getAttr(str(obj) + '.rotateY')
	print('ry = ' + str(ry))
	maya.cmds.setAttr(str(obj) + '.jointOrientY', ry)
	rz = maya.cmds.getAttr(str(obj) + '.rotateZ')
	print('rz = ' + str(rz))
	maya.cmds.setAttr(str(obj) + '.jointOrientZ', rz)
	maya.cmds.setAttr(str(obj) + '.rotateX', 0)
	maya.cmds.setAttr(str(obj) + '.rotateY', 0)
	maya.cmds.setAttr(str(obj) + '.rotateZ', 0)

def findNamePrefix(name,token):
	newName = name[len(token):len(name)]	
	return newName

def getDistance2Vectors(pointA,pointB):
	sp = getWStransform(pointA)
	ep = getWStransform(pointB)
	distance = math.sqrt(  math.pow(sp[0]-ep[0],2) + math.pow(sp[1]-ep[1],2) + math.pow(sp[2]-ep[2],2)  )
	return distance

def renamePrefixSuffix(array,prefix,suffix):
	returnArray = []
	for item in array:
		temp = maya.cmds.rename(item,prefix + item + suffix)
		returnArray.append(temp)

	return returnArray

def setUpGrp(array):
	i = 0
	previous = array[0]
	for a in array:
		exist = maya.cmds.objExists(a)
		if(exist == False ):
			maya.cmds.group(em=True,n=a,w=True)
			if(i > 0 ):
				maya.cmds.parent(a,previous,r=True)
		i = i + 1
		previous = a

def filterSelection2(array,breakerObj,increment):
	newArray = []
	brake = False
	print ('breakerObj = ' + str(breakerObj) )
	#for n in array:
	for n in range(0,len(array),increment):
		if(brake == False):
			newArray.append(array[n])
			if(array[n] == breakerObj):
				print ('array[n] =  ' + str(breakerObj) )
				brake = True
	print ('newArray = ' + str(newArray) )
	return newArray
	
def createIKjoints(jointArray,sidePrefix,jointType,group):
	newArray = []
	#brake = False
	endJoint = jointArray[len(jointArray)-1]
	print('endJoint = ' + str(endJoint))
	maya.cmds.select( clear=True )
	duplicate = maya.cmds.duplicate(jointArray[0])[0]
	maya.cmds.makeIdentity( duplicate, apply=True, t=0, r=1, s=0, n=0 )
	maya.cmds.parent(duplicate, w=True)
	howManyJoints = len(jointArray)
	for i in range(0,len(jointArray),1):
		n = findNamePrefix(jointArray[i],sidePrefix)
		newn = sidePrefix + jointType + n
		print('duplicate = ' + str(duplicate))
		j = maya.cmds.rename(duplicate,newn)
		newArray.append(j)
		child = maya.cmds.listRelatives(j,c=True,f=True)
		if(child != None):
			if(len(child) == 1):
				duplicate = child[0]
			else:
				print('child = ' + str(child))
				print(str(j) + ' has a branch of Multiple Joints')
				for c in child:
					print('c = ' + str(c))
					gc = maya.cmds.listRelatives(c,c=True,ad=True,f=True)
					print('gc = ' + str(gc))
					if(gc != None):
						for g in gc:
							prefixToIgnore = g.rfind('|')
							test = g[prefixToIgnore+1:len(g)]
							print('test = ' + str(test))
							if(test == endJoint):
								print('c has the end joint = ' + str(c))
								duplicate = c
								print('duplicate = ' + str(duplicate))
					else:	
						print('deleting ' + str(c))
						maya.cmds.delete(c)

	last = newArray[len(newArray)-1]
	c = maya.cmds.listRelatives(last,c=True,f=True)
	if(c != None):
		for n in c:
			maya.cmds.delete(n)
	maya.cmds.parent(newArray[0],group[len(group)-1])
	return newArray
							
def createIKhandles2(prefix,limbType,type,startJoint,endJoint,pvCtrl,curve,grp):
	ikh = prefix + limbType + '_ikHandle'
	if(type != 'ikSplineSolver'):
		h = maya.cmds.ikHandle(n = ikh, sj = startJoint, ee = endJoint, sol = type)
		print('h = ' + str(h))
		if(type == 'ikRPsolver'):
			maya.cmds.poleVectorConstraint( pvCtrl, ikh )
	else:
		h = maya.cmds.ikHandle(n = ikh, sj = startJoint, ee = endJoint, sol = type, ccv = False, c = curve)
		print('h = ' + str(h))
		maya.cmds.parent(h[0],grp)
				
	return h

def getTweenJoints(jointArray,numberTweenJoints):
	increment = 0
	newArray = []
	#print('increment = ' + str(increment) )
	print('jointArray = ' + str(jointArray) )
	for j in range(0,len(jointArray),1):
		print('j = ' + str(j) )
		if( j == increment ):
			increment = increment + howManyTweenJoints + 1
			print('increment = ' + str(increment) )
		else:
			newArray.append(jointArray[j])
			print('newArray = ' + str(newArray) )

	return newArray

def getShapeNodes(obj):
	howManyShapes = 0
	getShape = maya.cmds.listRelatives(obj, shapes=True)
	if(getShape == None):
		print 'ERROR:: getShapeNodes : No Shape Nodes Connected to ' + obj + ' /n'
	else:
		howManyShapes = len(getShape[0])
	return (getShape, howManyShapes)

#### END   - Common Methods ###############################################################################################################################################################################

#### START - Insert Extra Joints ##########################################################################################################################################################################
def insertExtraJoints00(selectedJoints,jointTypePrefix,sidePrefix,jointAimAxis,howManyTweenJoints):
	print('selectedJoints = ' + str(selectedJoints))
	maya.cmds.select( clear=True )
	oldMasterJoints = []
	howManySelJoints = len(selectedJoints)
	print('howManySelJoints = ' + str(howManySelJoints))
	for i in range(0,howManySelJoints-1,1):
		print('i = ' + str(i))
		masterJoint = selectedJoints[i]
		print('masterJoint = ' + str(masterJoint))
		print('selectedJoints[i] = ' + str(selectedJoints[i]))
		t = maya.cmds.rename(selectedJoints[i],'temp_' + masterJoint)
		oldMasterJoints.append(t)
		print('oldMasterJoints = ' + str(oldMasterJoints))
		getOldMasterJointPos = getWStransform(oldMasterJoints[i])
		masterJointName = findName(masterJoint,sidePrefix)
		translateAxis = '.t' + jointAimAxis
		jointDistance = getDistance2Vectors(oldMasterJoints[i],selectedJoints[i+1])
		jointTweendistance = jointDistance / (howManyTweenJoints + 1)
		getMasterJointPos = getWStransform(oldMasterJoints[i])
		previousJoint = maya.cmds.joint( n=masterJoint)

		for j in range(1,howManyTweenJoints+1,1):
			v = incrementPos(jointTweendistance,(j-1)*jointTweendistance,jointAimAxis)
			previousJoint = maya.cmds.joint( previousJoint,n=sidePrefix + jointTypePrefix[i] + str(j), p=v )

		setWStransform(masterJoint,getOldMasterJointPos)

		if(jointAimAxis == 'x'):
			aim = maya.cmds.aimConstraint( str(selectedJoints[i+1]), masterJoint, skip=["x"] )
			maya.cmds.delete(aim)
		elif(jointAimAxis == 'y'):
			aim = maya.cmds.aimConstraint( str(selectedJoints[i+1]), masterJoint, skip=["y"] )
			maya.cmds.delete(aim)
		else:
			aim = maya.cmds.aimConstraint( str(selectedJoints[i+1]), masterJoint, skip=["z"] )
			maya.cmds.delete(aim)
	
		setJointOriention(masterJoint)
		parent = maya.cmds.listRelatives( oldMasterJoints[i], parent=True )
		if(len(parent) != None):
			maya.cmds.parent(masterJoint,parent[0])
		
		maya.cmds.parent(selectedJoints[i+1],previousJoint)
		maya.cmds.delete(oldMasterJoints[i])
		maya.cmds.select( clear=True )

def insertExtraJoints06(jointArray,howManyJointsInserted,sidePrefix,prefix,suffix,jointAimAxis,jointOrientAxis):
	jointsInserted = []
	allJoints = []
	print('insertExtraJoints06 :: howManyJointsInserted = ' + str(howManyJointsInserted))
	print('insertExtraJoints06 :: jointArray = ' + str(jointArray))
	
	howManyJoints = len(jointArray)
	jointRadius = maya.cmds.getAttr(jointArray[0] + '.radius')

	PosOrNeg = 1

	if(sidePrefix == 'L_'):
		PosOrNeg = 1
		#print('LEFT')
	else:
		PosOrNeg = 1
		#print("RIGHT")

	#create the controls
	for i in range(0, howManyJoints-1, 1):
		
		increment = 1
		nextIndex = i + 1
		nextJoint = jointArray[nextIndex]
		print('insertExtraJoints06 :: nextJoint = ' + str(nextJoint))
		currentJoint = jointArray[i]
		print('insertExtraJoints06 :: currentJoint = ' + str(currentJoint))
		previousJoint = jointArray[i]
		print('insertExtraJoints06 :: previousJoint = ' + str(previousJoint))
		translate = maya.cmds.getAttr(nextJoint  + '.t' + jointAimAxis)
		jointSpacing = PosOrNeg * (translate / (howManyJointsInserted+1))
		print('insertExtraJoints06 :: jointSpacing = ' + str(jointSpacing))
		allJoints.append(currentJoint)
		#print('insertExtraJoints06 :: allJoints = ' + str(allJoints))
		for j in range(0,howManyJointsInserted,1):
			print('insertExtraJoints06 :: j = ' + str(j))
			insertJoint = maya.cmds.insertJoint(previousJoint)
			createJoint = maya.cmds.rename(insertJoint,prefix + jointArray[i] + '_' + str(increment)  + suffix)
			jointsInserted.append(createJoint)
			#print('insertExtraJoints06 :: jointsInserted = ' + str(jointsInserted))
			allJoints.append(createJoint)
			#print('insertExtraJoints06 :: allJoints = ' + str(allJoints))
			maya.cmds.setAttr (createJoint + '.t' + jointAimAxis,jointSpacing)
			maya.cmds.setAttr (createJoint + '.radius', jointRadius)
			previousJoint = createJoint
			print('insertExtraJoints06 :: previousJoint = ' + str(previousJoint))
			increment = increment + 1

		maya.cmds.setAttr (nextJoint + '.t' + jointAimAxis,jointSpacing)
		print ('insertExtraJoints06 :: jointsInserted = ' + str(jointsInserted))
		increment = 1

	allJoints.append(nextJoint)
	print('insertExtraJoints06 :: jointsInserted = ' + str(jointsInserted))
	print('insertExtraJoints06 :: allJoints = ' + str(allJoints))
	return (jointsInserted,allJoints)

#### END  - Insert Extra Joints ##########################################################################################################################################################################	
#### START  - SETUP IK SYSTEM   ##########################################################################################################################################################################	
def addStiffness(jointArray,ctrl):
	stiffnessAttr = 'stiffness'
	mainStiffness = ctrl + '.' + stiffnessAttr
	print('mainStiffness = ' + str(mainStiffness))

	doesStiffnessExist = maya.cmds.attributeQuery( stiffnessAttr, node=ctrl, exists=True )
	if( doesStiffnessExist != True):
		maya.cmds.addAttr(ctrl, longName='stiffness', attributeType='double', min=0, max=10, dv=0 )
		maya.cmds.setAttr(mainStiffness,edit=True, keyable=True)

	print('len(jointArray) = ' + str(len(jointArray)))
	if(len(jointArray) != 0):
		stretchNormaliseNode = prefix + 'stretchNormalise_setRange'
		conn = maya.cmds.listConnections( mainStiffness, d=True, s=False, t='setRange' )
		print('conn = ' + str(conn))
		setRangeNode = ''
		if( conn == None ):
			setRangeNode = maya.cmds.shadingNode('setRange',n=stretchNormaliseNode,au=True)
			maya.cmds.setAttr(setRangeNode + '.oldMaxY', 10)
			maya.cmds.setAttr(setRangeNode + '.maxY', 1)
		elif( len(conn) == 1):
			setRangeNode = conn[0]
			print('setRangeNode = ' + str(setRangeNode))
			maya.cmds.setAttr(setRangeNode + '.oldMaxY', 10)
			maya.cmds.setAttr(setRangeNode + '.maxY', 1)
		else:
			print('ERROR :: ' + mainStiffness + ' has too many setRange nodes connected to it!!!')

		socketAttribute1 = '.valueY'
		connectorAttribute1 = '.stiffness'

		connectorAttribute2 = '.outValueY'
		socketAttribute2 = '.stiffness'

		socket1 = setRangeNode + socketAttribute1
		connector1 = mainStiffness
		maya.cmds.connectAttr(connector1, socket1, force=True)

		for i in range(0, len(jointArray), 0):
			connector2 = setRangeNode + connectorAttribute2
	
			socket2 = jointArray[i] + (socketAttribute2 + 'X')
			maya.cmds.connectAttr(connector2, socket2, force=True)
	
			socket2 = jointArray[i] + (socketAttribute2 + 'Y')
			maya.cmds.connectAttr(connector2, socket2, force=True)

			socket2 = jointArray[i] + (socketAttribute2 + 'Z')
			maya.cmds.connectAttr(connector2, socket2, force=True)
	else:
		print('No Tween Joints to connect the Stiffness attribute')

def setUpIKstretch(prefix,jointAimAxis,limbTypeName,ikJointArray,howManyNodes,mainCtrl,startCTRL,endCTRL,dimGroup):
	#select second and last joint of Ik Chain, then the ctrl
	howManyJoints = len(ikJointArray)
	
	autoSwitchAttr = '.autoStretchIK'#must be boolean
	stretchIKAttr = '.stretchIK'
	stretchNormaliseNode = prefix + 'stretchNormalise_setRange'

	IKNormaliseNode = prefix + 'normalize_multiplyDivide'
	IKMultiplierNode = prefix + 'multiplier_multiplyDivide'
	IKConditionNode = prefix + 'autoStretch_condition'
	IKScaleLimiterNode = prefix + 'limit_multiplyDivide'
	IKAutoStretchBlendNode = prefix + 'autoStretch_blend'
	IKStretchBlendNode = prefix + 'stretch_blend'
	IKStretchDampener = prefix + 'StretchDampener_condition'
	IKStretchRemapNode = prefix + 'stretchDampenRemap_remapValue'
	IKStretchBlendNode = prefix + 'stretchDampenBlend_blend'
	IKDampenValueNode = prefix + 'DampenValue_multiplyDivide'
	dampenAmount = 0.960

	startJoint = ikJointArray[0]
	print('startJoint = ' + str(startJoint))
	endJoint = ikJointArray[len(ikJointArray)-1]
	print('endJoint = ' + str(endJoint))

	distanceName = prefix + 'distanceDimension1'

	distanceNode = maya.cmds.distanceDimension( sp=(-2, 0, 0), ep=(2, 0, 0) )
	
	maya.cmds.parent(distanceNode,dimGroup)
	distanceTrans = maya.cmds.listRelatives(distanceNode,p=True,f=True)
	distLocators = maya.cmds.listConnections(distanceNode,t='locator')
	print('distLocators = ' + str(distLocators))
	startLoc = maya.cmds.rename(distLocators[0],prefix + 'start_dim_LOC')
	endLoc = maya.cmds.rename(distLocators[1],prefix + 'end_dim_LOC')
	startLocPos = getWStransform(startJoint)
	setWStransform(startLoc,startLocPos)
	endLocPos = getWStransform(endJoint)
	setWStransform(endLoc,endLocPos)
	distanceName = maya.cmds.rename(distanceTrans[0],distanceName)
	print('distanceName = ' + str(distanceName))

	startParent = maya.cmds.parentConstraint(startLoc,startCTRL)
	endParent = maya.cmds.parentConstraint(endLoc,endCTRL)
	maya.cmds.delete(endParent)
	maya.cmds.parent(endLoc,mainCtrl,a=True)
	
	#START///////////////////////////////////CREATE CONDITION, NORMALISE MULTIPLYDIVIDE NODE AND 
	#START///////////////////////////////////CONNECT THE DISTANCE NODES DISTANCE ATTRIBUTE TO NORMALISE MULTIPLYDIVIDE NODES INPUT1X 
	#START///////////////////////////////////CONNECT THE NORMALISE MULTIPLYDIVIDE NODES OUPUTX TO 1st TERM OF CONDITION NODE
	
	#create set range node to normalise the stretch IK attribute*********************START**********create set range node to normalise the stretch IK attribute
	setRangeNode = maya.cmds.shadingNode('setRange',n=stretchNormaliseNode,au=True)
	connector = mainCtrl + stretchIKAttr
	socket = setRangeNode + '.valueX'
	maya.cmds.connectAttr(connector, socket, force=True)

	maya.cmds.setAttr(setRangeNode + '.oldMaxX', 10)
	maya.cmds.setAttr(setRangeNode + '.maxX', 1)
	#create set range node to normalise the stretch IK attribute*********************END**********create set range 
	
	#CREATE NORMALISE MULTIPLYDIVIDE NODE************************************************************START**********CREATE NORMALISE MULTIPLYDIVIDE NODE
	normaliseNode = maya.cmds.shadingNode('multiplyDivide',n=IKNormaliseNode + '1',au=True)
	connector = distanceName + '.distance'
	socket = normaliseNode + '.input1X'
	maya.cmds.connectAttr(connector, socket, force=True)

	#SET INPUT2X TO DISTANCE VALUE AND SET **************************************************************START**********SET INPUT2X TO DISTANCE VALUE AND SET 
	#MULTIPLYDIVIDE NODES OPERATION TO DIVIDE************************************************************START**********MULTIPLYDIVIDE NODES OPERATION TO DIVIDE
	socketAttribute = '.input2X'

	maya.cmds.setAttr(normaliseNode + '.operation', 2)
	distance = maya.cmds.getAttr(connector)
	print ('distance = ' + str(distance))

	maya.cmds.setAttr(normaliseNode + socketAttribute, distance) 
	#set Normalise nodes Z output to 1; ie 1 / 1 = 1. This will be connected to $stretch input 1R
	maya.cmds.setAttr(normaliseNode + '.input1Z', 1)
	maya.cmds.setAttr(normaliseNode + '.input2Z', 1)

	#SET INPUT2X TO DISTANCE VALUE AND SET **************************************************************END**********SET INPUT2X TO DISTANCE VALUE AND SET 
	#MULTIPLYDIVIDE NODES OPERATION TO DIVIDE************************************************************END**********MULTIPLYDIVIDE NODES OPERATION TO DIVIDE

		#CREATE NORMALISE MULTIPLYDIVIDE NODE************************************************************END**********CREATE NORMALISE MULTIPLYDIVIDE NODE

	stretchRemapNode = maya.cmds.shadingNode('remapValue',n=IKStretchRemapNode + '1',au=True) 
	socket =  stretchRemapNode + '.inputValue'
	connector =  normaliseNode + '.outputX'  

	maya.cmds.connectAttr(connector, socket, force=True)

	maya.cmds.setAttr(stretchRemapNode + '.value[0].value_Position',0.0)
	maya.cmds.setAttr(stretchRemapNode + '.value[0].value_FloatValue',0.0)
	maya.cmds.setAttr(stretchRemapNode + '.value[0].value_Interp',2)

	maya.cmds.setAttr(stretchRemapNode + '.value[1].value_Position',1.0)
	maya.cmds.setAttr(stretchRemapNode + '.value[1].value_FloatValue',0.0)
	maya.cmds.setAttr(stretchRemapNode + '.value[2].value_Interp',2)

	maya.cmds.setAttr(stretchRemapNode + '.value[2].value_FloatValue',1.0)
	maya.cmds.setAttr(stretchRemapNode + '.value[2].value_Position',0.5)
	maya.cmds.setAttr(stretchRemapNode + '.value[2].value_Interp',2)

	maya.cmds.setAttr(stretchRemapNode + '.inputMin',0)
	maya.cmds.setAttr(stretchRemapNode + '.inputMax',2)

	StretchBlendNode = maya.cmds.shadingNode('blendColors',n=IKStretchBlendNode + '1',au=True) 

	socket =  StretchBlendNode + '.blender'
	connector =  stretchRemapNode + '.outValue'  

	maya.cmds.connectAttr(connector, socket, force=True)

	dampenValueNode = maya.cmds.shadingNode('multiplyDivide',n=IKDampenValueNode + '1',au=True) 
	
	maya.cmds.setAttr(dampenValueNode + '.input1X',dampenAmount)
	maya.cmds.setAttr(dampenValueNode + '.input1Y',1)
	socket = StretchBlendNode + '.color2R'
	connector = dampenValueNode + '.outputX'   

	maya.cmds.connectAttr(connector, socket, force=True)

	socket = StretchBlendNode + '.color1R'
	connector = dampenValueNode + '.outputY'   

	maya.cmds.connectAttr(connector, socket, force=True)

	stretchDampenerNode = maya.cmds.shadingNode('condition',n=IKStretchDampener + '1',au=True) 
	socket =  stretchDampenerNode + '.firstTerm'
	connector =  StretchBlendNode + '.outputR'  

	maya.cmds.connectAttr(connector, socket, force=True)

	maya.cmds.setAttr(stretchDampenerNode + '.operation',0)
	maya.cmds.setAttr(stretchDampenerNode + '.secondTerm',1)
	maya.cmds.setAttr(stretchDampenerNode + '.colorIfTrueR',1)
	
	socket =  stretchDampenerNode + '.colorIfFalseR'
	connector =  StretchBlendNode + '.outputR'  

	maya.cmds.connectAttr(connector, socket, force=True)

	#??????????????????????????THIS IS REDUNDANT??????????????????????????????
	#START/////////////////////////////////////////////////////////////CREATE LIMITER MULTIPLYDIVIDE NODE
	limiterNode = maya.cmds.shadingNode('multiplyDivide',n=IKScaleLimiterNode + '1',au=True) 
	
	IKScaleLimiterNode = limiterNode

	#CONNECT NORMALISE MULTIPLYDIVIDE NODES OUPUTX TO ".colorIfFalseR" OF CONDITION NODE
	socket = limiterNode + '.input2X'
	connector = stretchDampenerNode + '.outColorR'   

	maya.cmds.connectAttr(connector, socket, force=True)

	socket = limiterNode + '.input1X'
	connector = normaliseNode + '.outputX'   

	maya.cmds.connectAttr(connector, socket, force=True)

	#END//////////////////////////////////////////////////////////////CREATE LIMITER MULTIPLYDIVIDE NODE
	#??????????????????????????THIS IS REDUNDANT??????????????????????????????

	#CREATE CONDITION NODE AND CONNECT NORMALISE ********************************************START********CREATE CONDITION NODE AND CONNECT NORMALISE 
	#MULTIPLYDIVIDE NODES OUPUTX TO 1st TERM OF CONDITION NODE*******************************START********MULTIPLYDIVIDE NODES OUPUTX TO 1st TERM OF CONDITION NODE
	conditionNode = maya.cmds.shadingNode('condition',n=IKConditionNode + '1',au=True) 
	socket =  conditionNode + '.firstTerm'
	connector =  normaliseNode + '.outputX'  

	maya.cmds.connectAttr(connector, socket, force=True)

	maya.cmds.setAttr(conditionNode + '.operation',4)
	maya.cmds.setAttr(conditionNode + '.secondTerm',1)
	maya.cmds.setAttr(conditionNode + '.colorIfTrueR',1)

	#CONNECT NORMALISE MULTIPLYDIVIDE NODES OUPUTX TO ".colorIfFalseR" OF CONDITION NODE
	socket = conditionNode + '.colorIfFalseR'
	connector = IKScaleLimiterNode + '.outputX'   

	maya.cmds.connectAttr(connector, socket, force=True)

	#CREATE CONDITION NODE AND CONNECT NORMALISE ********************************************END********REATE CONDITION NODE AND CONNECT NORMALISE 
	#MULTIPLYDIVIDE NODES OUPUTX TO 1st TERM OF CONDITION NODE*******************************END********MULTIPLYDIVIDE NODES OUPUTX TO 1st TERM OF CONDITION NODE

	#CREATE AUTO STETCH ON AND OFF NODE********************************************START********CREATE AUTO STETCH ON AND OFF NODE
	#connect waist CTRL auto switch to the first term
	connector = mainCtrl + autoSwitchAttr
	socket = setRangeNode + '.valueY'
	maya.cmds.connectAttr(connector, socket, force=True)

	maya.cmds.setAttr(setRangeNode + '.oldMaxY', 10)
	maya.cmds.setAttr(setRangeNode + '.maxY', 1)

	autoStretch = maya.cmds.shadingNode('blendColors',n=IKAutoStretchBlendNode + '1',au=True) 
	socket = autoStretch + '.blender' #waist CTRL attribute auto stretch via set Range
	connector = setRangeNode + '.outValueY' 
	maya.cmds.connectAttr(connector, socket, force=True)

	#from auto stretch condition node;  $conditionNode 
	socket = autoStretch + '.color1R'
	connector = conditionNode + '.outColorR'
	maya.cmds.connectAttr(connector, socket, force=True)

	#from stretch  node;  $stretch 
	socket = autoStretch + '.color2R'
	connector = IKScaleLimiterNode + '.outputX'
	maya.cmds.connectAttr(connector, socket, force=True)
	#CREATE AUTO STETCH ON AND OFF NODE********************************************END********CREATE AUTO STETCH ON AND OFF NODE

	#CREATE STRETCH ON AND OFF NODE**************************************************************START*******************CREATE STRETCH ON AND OFF NODE
	stretch =  maya.cmds.shadingNode('blendColors',n=IKStretchBlendNode + '1',au=True) 
	socket = stretch + '.color2R'
	connector = normaliseNode + '.outputZ'
	maya.cmds.connectAttr(connector, socket, force=True)
	
	socket = stretch + '.color1R'
	connector =  autoStretch + '.outputR'
	maya.cmds.connectAttr(connector, socket, force=True)

	#connect $setRangeNode .outpUtX to $stretch blend input
	socket =  stretch + '.blender'
	connector =  setRangeNode + '.outValueX'
	maya.cmds.connectAttr(connector, socket, force=True)

	#CREATE STRETCH ON AND OFF NODE**************************************************************END*******************CREATE STRETCH ON AND OFF NODE

	IKConditionNode = conditionNode
	IKNormaliseNode = normaliseNode
	IKAutoStretchBlendNode = autoStretch
	IKStretchBlendNode = stretch
	stretchNormaliseNode = setRangeNode

	#END///////////////////////////////////CREATE CONDITION, NORMALISE MULTIPLYDIVIDE NODE AND 
	#END///////////////////////////////////CONNECT THE DISTANCE NODES DISTANCE ATTRIBUTE TO NORMALISE MULTIPLYDIVIDE NODES INPUT1X 
	#END///////////////////////////////////CONNECT THE NORMALISE MULTIPLYDIVIDE NODES OUPUTX TO 1st TERM OF CONDITION NODE

	#START/////////////////////////////////////////////////////////////MULTIPLIER NODES READY TO BE CONNECT RO IK JOINT TRANSLATEX
	multiplierNodes = []
	for i in range(0,howManyNodes,1):
		multiplierNode = maya.cmds.shadingNode('multiplyDivide',n=IKMultiplierNode + '1',au=True)
		#multiplierNodes[i] = multiplierNode
		multiplierNodes.append(multiplierNode)

	#END///////////////////////////////////////////////////////////////MULTIPLIER NODES READY TO BE CONNECT RO IK JOINT TRANSLATEX

	#START/////////////////////////////////////////////////////////////CONNECT THE CONDITION NODE TO MULTIPLIER NODES READY TO BE CONNECT TO IK JOINT TRANSLATEX
	connectorAttribute1 = '.outputR'
	socketAttribute1 = '.input' 
	connector1 = IKStretchBlendNode + connectorAttribute1

	connectorAttribute2 = '.output'

	whichJoint = 1
	brake = 0

	#CONNECT CONDITION NODE TO MULYIPLIER NODES
	for i in range(0,howManyNodes,1):
		multiply = i + 1 #use to select the right joint in $sel[] and "spine_multiplier_multiplyDivide" node
	
		whichAxis = [' ', 'X', 'Y', 'Z']
		for j in range(1,4,1):
			if(brake == 0):
				socket1 = multiplierNodes[i] + (socketAttribute1 + '2' + whichAxis[j])
				maya.cmds.connectAttr(connector1, socket1, force=True)
		
				getAttr = maya.cmds.getAttr(ikJointArray[whichJoint] + '.t' + jointAimAxis)
				setAttr = maya.cmds.setAttr(multiplierNodes[i] + (socketAttribute1 + '1' + whichAxis[j]), getAttr)
		
				connector2 = IKMultiplierNode + str(multiply) + (connectorAttribute2 + whichAxis[j])
				socket2 = (ikJointArray[whichJoint] + '.t' + jointAimAxis)
				maya.cmds.connectAttr(connector2, socket2, force=True)

				whichJoint = whichJoint + 1
	
				print ('whichJoint = ' + str(whichJoint))
				print ('howManyJoints = ' + str(howManyJoints))

				#LOOP BREAK TO CATER FOR ODD NUMBER OF JOINTS
				if(whichJoint == howManyJoints):
					brake = 1
	
		print ('i = ' + str(i) )

	#END//////////////////////////////////////////////////////////////CONNECT THE CONDITION NODE TO MULTIPLIER NODES READY TO BE CONNECT TO IK JOINT TRANSLATEX
	#================================================================================================================================
	#END++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

	#^^^^^^^^^^^^^^^-----TESTED AND WORKS-----^^^^^^^^^^^^^^^!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

def buildIKfootRig(prefix,deleteHeelJoint,jointArray,howManyJoints,heelLocOffset):
	#Find the position for foot, ball, toe and store them
	#Instructions:
	#1.Create a IK foot Rig that has a ankle joint, ball joint, toe joint heading off in front and finally a temporary joint called "_toDelete_heel",
	######that branches from the ankle down to where the heel of the geo meets the ground.
	#2.Select the ankle joint and run script

	#def createIKfootLocator(name,howManyJoints,jointArray):
	#	name = 'tipToe_LOC'
	#	createLocator = maya.cmds.spaceLocator(n=prefix + name, p=(0,0,0))
	#	whichJointLocation = howManyJoints - 2 #//////////////////////////////////////select tip Toe///////NEEDS TO BE UPDATED
	#	whichJoint = jointArray[whichJointLocation]
	#	constainLocator = maya.cmds.pointConstraint(whichJoint, createLocator, offset=(0, 0, 0), skip="y", weight=1 )
	#	maya.cmds.delete(constainLocator)

	print('howManyJoints = ' + str(howManyJoints))

	#tipToe locator and position it**************************************************************START*******tipToe locator & position it
	name = 'tipToe_LOC'
	createLocator = maya.cmds.spaceLocator(n=prefix + name, p=(0,0,0))
	whichJointLocation = howManyJoints - 1 #//////////////////////////////////////select tip Toe///////NEEDS TO BE UPDATED
	whichJoint = jointArray[whichJointLocation]
	constainLocator = maya.cmds.pointConstraint(whichJoint, createLocator, offset=(0, 0, 0), skip="y", weight=1 )
	maya.cmds.delete(constainLocator)
	#tipToe locator and position it**************************************************************END*********tipToe locator & position it

	previousLocator = createLocator[0]

	#heel locator and position it******************************************************************START*******heel locator & position it
	name = 'heel_LOC'
	createLocator = maya.cmds.spaceLocator(n=prefix + name, p=(0,0,0))
	whichJointLocation = 0 #///////////////////////////////////////////////////////////////select foot///////NEEDS TO BE UPDATED
	whichJoint = deleteHeelJoint #"_toDelete_heel"------------------->//OLD CODE//$jointArray[$whichJointLocation];
	constainLocator = maya.cmds.pointConstraint(whichJoint, createLocator, offset=(0, 0, 0), skip="y", weight=1 )
	maya.cmds.delete(constainLocator)
	#heel locator and position it******************************************************************END*******heel locator & position it

	currentLocator = createLocator[0]

	#BREAK OFFSET HEEL LOC#######################################################################################################START

	#offset position of heel*************************************************************************START*****offset position of heel
	getCurrentLocatorPos = maya.cmds.getAttr(currentLocator + '.translateZ') #////////////////////////////////NEEDS TO BE GLOBALISED
	currentPos = getCurrentLocatorPos
	offset = heelLocOffset #//////////////////////////////////////////////////////////////////////////////////////NEEDS TO BE GLOBALISED
	offsetCurrentLocator = currentPos - offset
	setCurrentLocatorPos = maya.cmds.setAttr(currentLocator + '.translateZ', offsetCurrentLocator) #//////////NEEDS TO BE GLOBALISED
	#offset position of heel**************************************************************************END******offset position of heel

	#BREAK OFFSET HEEL LOC#######################################################################################################END

	maya.cmds.parent(currentLocator, previousLocator, a=True)
	previousLocator = createLocator[0]

	#ball locator 1 & position it**********************************************************************START*****ball locator 1 & position it
	name = 'roll_LOC1'
	createLocator = maya.cmds.spaceLocator(n=prefix + name, p=(0,0,0))
	whichJointLocation = howManyJoints - 2 #////////////////////////////////////////select tip Toe///////NEEDS TO BE UPDATED
	whichJoint = jointArray[whichJointLocation]
	constainLocator = maya.cmds.pointConstraint(whichJoint, createLocator, offset=(0, 0, 0), weight=1 )
	maya.cmds.delete(constainLocator)
	#ball locator 1 & position it**********************************************************************END*****ball locator 1 & position it

	currentLocator = createLocator[0]
	branchPoint = currentLocator #///////////////////////////////////////////slect branch point/////////////////////NEEDS TO BE UPDATED
	maya.cmds.parent(currentLocator, previousLocator, a=True)
	previousLocator = createLocator[0]

	#ball locator 2 & position it**********************************************************************START*****ball locator 2 & position it
	name = 'ball_LOC1'
	createLocator = maya.cmds.spaceLocator(n=prefix + name, p=(0,0,0))
	whichJointLocation = howManyJoints - 2 #//////////////////////////////////////select ball///////NEEDS TO BE UPDATED
	whichJoint = jointArray[whichJointLocation]
	constainLocator = maya.cmds.pointConstraint(whichJoint, createLocator, offset=(0, 0, 0), weight=1 )
	maya.cmds.delete(constainLocator)
	#ball locator 2 & position it**********************************************************************END*****ball locator 2 & position it

	currentLocator = createLocator[0]
	
	maya.cmds.parent(currentLocator, previousLocator, a=True)
	previousLocator = createLocator[0]

	#ankle locator & position it**********************************************************************START*****ankle locator & position it
	name = 'ankle_LOC1'
	createLocator = maya.cmds.spaceLocator(n=prefix + name, p=(0,0,0))
	whichJointLocation = 0 #////////////////////////////////////////select foot///////NEEDS TO BE UPDATED
	whichJoint = jointArray[whichJointLocation]
	constainLocator = maya.cmds.pointConstraint(whichJoint, createLocator, offset=(0, 0, 0), weight=1 )
	maya.cmds.delete(constainLocator)
	#ankle locator & position it**********************************************************************END*****ankle locator & position it

	currentLocator = createLocator[0]
	maya.cmds.parent(currentLocator, previousLocator, a=True)
	previousLocator = createLocator[0]
	
	#BREAK AND GO BACK TO BALL LOC 1#####################################################################################################START

	#toe locator 1 & position it**********************************************************************START*****toe locator & position it
	name = 'toe_LOC1'
	createLocator = maya.cmds.spaceLocator(n=prefix + name, p=(0,0,0))
	whichJointLocation = howManyJoints - 2 #////////////////////////////////////////select foot///////NEEDS TO BE UPDATED
	whichJoint = jointArray[whichJointLocation]
	constainLocator = maya.cmds.pointConstraint(whichJoint, createLocator, offset=(0, 0, 0), weight=1 )
	maya.cmds.delete(constainLocator)
	#toe locator 1 & position it**********************************************************************END*****toe locator & position it

	currentLocator = createLocator[0]
	maya.cmds.parent(currentLocator, branchPoint, a=True) #////////////////////////////////////////select ball 2///////NEEDS TO BE UPDATED
	previousLocator = createLocator[0]

	#toe locator 2 & position it**********************************************************************START*****toe locator & position it
	name = 'toe_LOC2'
	createLocator = maya.cmds.spaceLocator(n=prefix + name, p=(0,0,0))
	whichJointLocation = howManyJoints - 1 #//////////////////////////////////////select tip Toe///////NEEDS TO BE UPDATED
	whichJoint = jointArray[whichJointLocation]
	constainLocator = maya.cmds.pointConstraint(whichJoint, createLocator, offset=(0, 0, 0), weight=1 )
	maya.cmds.delete(constainLocator)
	#toe locator 2 & position it**********************************************************************END*****toe locator & position it

	currentLocator = createLocator[0]
	maya.cmds.parent(currentLocator, previousLocator, a=True) #//////////////////////////////////////////select toe 1///////NEEDS TO BE UPDATED
	previousLocator = createLocator[0]

	return prefix + 'tipToe_LOC'

def masterCreateIK(sidePrefix,jointType,limbType,limbTypeName,upAxis,jointAimAxis,howManyTweenJoints,startJoint,midJoint,endJoint,toeJoint,mainCtrl,startCtrl,endCtrl,pvCtrl):
	prefix = sidePrefix + jointType

	groupSkeleton = ['char_GRP','DO_NOT_ALTER_GRP','skeleton_scale_GRP','CTRL_skeleton_GRP']
	groupDim = ['char_GRP','DO_NOT_ALTER_GRP','dimension_GRP']
	skeletonCtrlGrp = groupSkeleton[3]


	if(len(sel) > 2):
		toeJoint = sel[2]

	maya.cmds.select(sel[0])
	maya.cmds.select(hierarchy = True)
	selHi = maya.cmds.ls(selection = True)
	selectedJoints = []
	if(limbTypeName == 'leg_'):
		if(len(sel) > 2):
			if(jointType == 'SPL_'):
				selectedJoints = filterSelection2(selHi,endJoint,1)
				#maya.cmds.delete(selHi[len(selectedJoints)+1])
			else:
				selectedJoints = filterSelection2(selHi,toeJoint,1)

		else:
			print('ERROR :: No toe joint selected')
	else:
		selectedJoints = filterSelection2(selHi,endJoint,1)
	print('selectedJoints = ' + str(selectedJoints))
	print('selectedJoints = ' + str(selectedJoints))
	
	maya.cmds.select(clear=True)

	setUpGrp(groupSkeleton)
	setupPolVector(pvCtrl,midJoint,0,upAxis)

	#ikJoints are only the joints that make up the IKPhandle chain
	ikJoints = createIKjoints(selectedJoints,sidePrefix,jointType,groupSkeleton)
	print('ikJoints = ' + str(ikJoints))
	print('pvCtrl = ' + str(pvCtrl))
	ej = prefix + findNamePrefix(endJoint,sidePrefix)
	print('ej = ' + str(ej))
	mainIkhandle = createIKhandles(prefix,limbTypeName,'ikRPsolver',ikJoints[0],ej,pvCtrl,None,None)
	print('mainIkhandle = ' + str(mainIkhandle))
	grp = maya.cmds.listRelatives(pvCtrl,p=True,type='transform')
	print('grp = ' + str(grp))
	if(grp != None):
		maya.cmds.parent(grp[0],mainCtrl,a=True)
	else:
		maya.cmds.parent(pvCtrl,mainCtrl,a=True)

	if(limbTypeName == 'leg_'):
		footIK = createIKhandles(prefix,'foot-','ikSCsolver',ikJoints[len(ikJoints)-3],ikJoints[len(ikJoints)-2],False,None,None)
		print('footIK = ' + str(footIK))
		toeIK = createIKhandles(prefix,'toe_','ikSCsolver',ikJoints[len(ikJoints)-2],ikJoints[len(ikJoints)-1],False,None,None)
		print('toeIK = ' + str(toeIK))
	
		footJoints = [prefix + 'ankle',prefix + 'foot',prefix + 'toe']
		toDelete_heel = sidePrefix + 'toDelete_heel'
		tipToeLoc = buildIKfootRig(prefix,toDelete_heel,footJoints,len(footJoints),0.00)
		print('tipToeLoc = ' + str(tipToeLoc))
		maya.cmds.parent(toeIK[0], prefix + 'toe_LOC2')
		maya.cmds.parent(footIK[0], prefix + 'ball_LOC1')
		maya.cmds.parent(mainIkhandle[0], prefix + 'ankle_LOC1')
		maya.cmds.parent(tipToeLoc,mainCtrl,a=True)

	prefix = sidePrefix + jointType + limbTypeName
	print('prefix = ' + str(prefix))
	ikJointsFiltered = filterSelection2(ikJoints,ej,1)
	print('ikJointsFiltered = ' + str(ikJointsFiltered))
	print('len(ikJointsFiltered) = ' + str(len(ikJointsFiltered)))
	howManyNodes = int(math.ceil(len(ikJointsFiltered) / 3)) #This divided by three because of X,Y,Z
	print('howManyNodes = ' + str(howManyNodes))
	setUpGrp(groupDim)
	setUpIKstretch(prefix,jointAimAxis,limbTypeName,ikJointsFiltered,howManyNodes,mainCtrl,startCtrl,endCtrl,groupDim[len(groupDim)-1])

	#Add Control over the stiffness of the IK joints
	tweenJoints = getTweenJoints(ikJoints,howManyTweenJoints)
	print('tweenJoints = ' + str(tweenJoints))
	addStiffness(tweenJoints,mainCtrl)

	return ikJoints


#### END    - SETUP IK SYSTEM   ##########################################################################################################################################################################	


#### START - SplineIK ####################################################################################################################################################################################
def insertHowManySplineIKJoints(howManyTweenJoints,howManySplineIKControlJoints,tweenSplineJoints):
	tsj = tweenSplineJoints * (howManySplineIKControlJoints + 1)
	#print('cj = ' + str(cj))
	#tsj = (cj+1) * tweenSplineJoints
	print('tsj = ' + str(tsj))
	#print('tweenSplineJoints = ' + str(tweenSplineJoints))
	multiplier = tweenSplineJoints + 1
	if(howManySplineIKControlJoints == 0):
		multiplier = 0
	if(tweenSplineJoints == 0):
		#tweenSplineJoints = 1
		tsj = tweenSplineJoints + howManySplineIKControlJoints
		multiplier = 1
	print('multiplier = ' + str(multiplier))
	return (tsj,multiplier)

def createArrowCtrl(name,colour,axis,scle):
	maya.cmds.curve(p=[(0,0,-14),(0,0,-14),(-4,0,-10),(-4,0,-10),(-4,0,-10),(-2,0,-10),(-2,0,-10),(-2,0,-10),(-2,0,-2),(-2,0,-2),(-2,0,-2),(-10,0,-2),(-10,0,-2),(-10,0,-2),(-10,0,-4),(-10,0,-4),(-10,0,-4),(-14,0,0),(-14,0,0),(-14,0,0),(-10,0,4),(-10,0,4),(-10,0,4),(-10,0,2),(-10,0,2),(-10,0,2),(-2,0,2),(-2,0,2),(-2,0,2),(-2,0,10),(-2,0,10),(-2,0,10),(-4,0,10),(-4,0,10),(-4,0,10),(0,0,14),(0,0,14),(0,0,14),(4,0,10),(4,0,10),(4,0,10),(2,0,10),(2,0,10),(2,0,10),(2,0,2),(2,0,2),(2,0,2),(10,0,2),(10,0,2),(10,0,2),(10,0,4),(10,0,4),(10,0,4),(14,0,0),(14,0,0),(14,0,0),(10,0,-4),(10,0,-4),(10,0,-4),(10,0,-2),(10,0,-2),(10,0,-2),(2,0,-2),(2,0,-2),(2,0,-2),(2,0,-10),(2,0,-10),(2,0,-10),(4,0,-10),(4,0,-10),(4,0,-10),(0,0,-14),(0,0,-14)],k=[0,0,0,1,1,1,2,2,2,3,3,3,4,4,4,5,5,5,6,6,6,7,7,7,8,8,8,9,9,9,10,10,10,11,11,11,12,12,12,13,13,13,14,14,14,15,15,15,16,16,16,17,17,17,18,18,18,19,19,19,20,20,20,21,21,21,22,22,22,23,23,23,24,24,24])
	ctrl = maya.cmds.ls(selection=True)
	print('ctrl = ' + str(ctrl))
	maya.cmds.rename(ctrl,name)
	shpe = getShapeNodes(name)
	print('shpe[0][0] = ' + str(shpe[0][0]))
	maya.cmds.setAttr(str(shpe[0][0]) + '.overrideEnabled',1)
	maya.cmds.setAttr(str(shpe[0][0]) + '.overrideColor', colour)
	maya.cmds.setAttr(str(name) + '.rotate' + str(axis), 90)
	maya.cmds.setAttr(str(name) + '.scaleX', scle)
	maya.cmds.setAttr(str(name) + '.scaleY', scle)
	maya.cmds.setAttr(str(name) + '.scaleZ', scle)
	maya.cmds.makeIdentity( str(name), apply=True, t=1, r=1, s=1 )
	return name
		
def createCurve(objArray,name,grp):
	howManyObjs = len(objArray)
	print ('howManyObjs = ' + str(howManyObjs))
	points =''
	pos1 = (0,0,0)
	for i in range(0,howManyObjs,1):
		print ('i = ' + str(i))
		if(i != 1):
			pos = getWStransform(objArray[i])
			p = '(' + str(pos[0]) + ',' + str(pos[1]) + ',' + str(pos[2]) + ')'
			print('p = ' + str(p))
			if(i != howManyObjs-1):
				p = p + ', '
		else:
			pos1 = getWStransform(objArray[i])
			print('pos1 = ' + str(pos1))
		points = points + p
		print('points = ' + str(points))

	eval('maya.cmds.curve(p=[' + points + '])')
	curve = maya.cmds.ls(selection=True)
	print ('curve = ' + str(curve))
	rename = maya.cmds.rename(curve,name)
	maya.cmds.parent(rename,grp)
	setWStransform(str(rename) + '.cv[1]',pos1)

	#returns name of curve and number of CV's
	return (rename,howManyObjs-1)

def clusterCurve(curve,nme,grp):
	maya.cmds.select(curve + '.cv[*]')
	cvs = maya.cmds.ls(selection=True)
	print ('cvs = ' + str(cvs))
	print('cvs length = ' + str(len(cvs)))
	rf = cvs[0].rfind(':')
	print ('rf = ' + str(rf))
	lenCVs = len(cvs[0])
	print ('lenCVs = ' + str(lenCVs))
	number = int(cvs[0][(rf+1):(lenCVs-1)])
	print ('number = ' + str(number))
	
	listOfClusters = []
	for i in range(0,number+1,1):
		c = maya.cmds.cluster(str(curve) + '.cv[' + str(i) + ']')
		nn = maya.cmds.rename(c[1],nme+str(i+1))
		listOfClusters.append(nn)
		if( grp != None ):
			maya.cmds.parent(nn,grp)

	print ('listOfClusters = ' + str(listOfClusters))
	return listOfClusters

def setUpSplineIKstretch(jointArray,prefix,crve,aimAxis):
	splineNormaliseNode = prefix + 'spline_normalize_multiplyDivide'
	splineMultiplyNode = prefix + 'spline_multiplier_multiplyDivide'
	curveInfo = prefix + 'spline_curveInfo1'

	howManyJoints = len(jointArray)

	howManyNodes = int(math.ceil(len(jointArray) / 3))
	#START////////////////////////////////////////////////////////////////////////////////////CREATE CURVE INFO NODE FOR CHAR SPINE 
	#CREATE CURVE INFO AND MULTIPLYDIVIDE NODES
	curveInfoNode = maya.cmds.arclen(crve, ch=True)
	multiplierNode = maya.cmds.shadingNode('multiplyDivide',n=splineNormaliseNode + '1',au=True)

	splineNormalise = multiplierNode #ENSURE THAT THERE CONTINUITY THROUGH OUT THE SCRIPT

	#CONNECT ARCLENGTH TO INPUT1X 
	socket = multiplierNode + '.input1X'
	connector = curveInfoNode + '.arcLength'
	maya.cmds.connectAttr(connector, socket, force=True)

	#SET INPUT2X TO ARCLENGTH VALUE AND SET MULTIPLEDIVED NODES OPERATION TO DIVIDE
	socketAttribute = '.input2X'

	maya.cmds.setAttr(multiplierNode + '.operation',2)
	arcLength = maya.cmds.getAttr(connector)

	maya.cmds.setAttr(multiplierNode + '.input2X', arcLength)

	maya.cmds.rename(curveInfoNode, curveInfo)
	#print('splineMultiplyNode = ' + str(splineMultiplyNode))
	#END/////////////////////////////////////////////////////////////////////////////////////CREATE CURVE INFO NODE FOR CHAR SPINE 

	#START///////////////////////////////////////////////////////////////////////////////////CREATE MULTIPLYDIVIDE NODES TO BE CONNECTED TO THE INDIVIDUAL JOINTS TRANSLATEX 
    	splineMultiply = []
    	#CREATE MULTIPLYDIVIDE NODES 
    	for i in range(0,howManyNodes,1):
		temp = maya.cmds.shadingNode('multiplyDivide', n=splineMultiplyNode + str(1), au=True)
		splineMultiply.append(temp)
		
	print ('splineMultiply = ' + str(splineMultiply))

	connectorAttribute1 = '.outputX' #change this variable
	socketAttribute1 = '.input' #change this variable
	connector1 = splineNormalise + connectorAttribute1
	connectorAttribute2 = '.output'
	
	whichJoint = 1

	whichAxis = [' ', 'X', 'Y', 'Z']
	brake = 0

	print ('jointArray 1 = ' + str(jointArray))

	#CONNECT THE NORMALISE NODE TO THE MULTIPLYDIVIDE NODES, COPY SPINE JOINT TRANSLATEX TO MULTIPLYDIVIDE NODES INPUT 1XYZ ATTRIBUTES AND 
	#CONNECT MULTIPLYDIVIDE NODES OUTPUT XYZ TO SPINE JOINT TRANSLATEX
	for i in range(0, howManyNodes, 1):
		
		#multiply = i + 1
	
		for j in range(1, 4, 1):
			if(brake == 0):
				
				#socket1 = splineMultiply + str(multiply) + (socketAttribute1 + '2' + whichAxis[j])
				socket1 = splineMultiply[i] + (socketAttribute1 + '2' + whichAxis[j])
				maya.cmds.connectAttr(connector1, socket1, force=True)
		
				getAttribute = maya.cmds.getAttr(jointArray[whichJoint] + '.t' + aimAxis)
				#setAttr = maya.cmds.setAttr(splineMultiplyNode + str(multiply) + (socketAttribute1 + '1' + whichAxis[j]), getAttr)
				setAttr = maya.cmds.setAttr( splineMultiply[i] + (socketAttribute1 + '1' + whichAxis[j]), getAttribute)
		
				connector2 = splineMultiply[i] + (connectorAttribute2 + whichAxis[j])
				print ('connector2 = ' + str(connector2))
				socket2 = (jointArray[whichJoint] + '.t' + aimAxis)
				print ('socket2 = ' + str(socket2))
				maya.cmds.connectAttr(connector2, socket2, force=True)

				whichJoint = whichJoint + 1
	
				print ('whichJoint = ' + str(whichJoint))
				print ('howManyJoints = ' + str(howManyJoints))

				#LOOP BREAK TO CATER FOR ODD NUMBER OF JOINTS
				if(whichJoint == howManyJoints):
					brake = 1

	#END/////////////////////////////////////////////////////////////////////////////////////CREATE MULTIPLYDIVIDE NODES TO BE CONNECTED TO THE INDIVIDUAL JOINTS TRANSLATEX 

def setConstraint(contraintType, source, destination, name):
	constraint = None
	type = 'point'
	if(contraintType == 'parent'):
		type = 'parent'
		if(name != None):
			constraint = maya.cmds.parentConstraint(source,destination, mo=True, name = name)
		else:
			constraint = maya.cmds.parentConstraint(source,destination, mo=True)
	else:
		if(name != None):
			constraint = maya.cmds.pointConstraint(source,destination, mo=True, name = name)
		else:
			constraint = maya.cmds.pointConstraint(source,destination, mo=True)

	return (constraint,type)
		 
def setUpSplineIKControls(clustered, ikCtrl, fkCtrl, splineIkCtrl, name):
	if(clustered == True):
		#point constrain the cluster to the nearest control joint
		if(ikCtrl != None):
		#if(len(ikCtrl) > 0):
			ik = setConstraint('point', ikCtrl, splineIkCtrl, name)
			if(fkCtrl != None):
			#if(len(fkCtrl) > 0):
				fk = setConstraint('point', fkCtrl, splineIkCtrl, name)
		else:
			fk = setConstraint('point', fkCtrl, splineIkCtrl, name)
	else:
		if(len(ikCtrl) != None):
			ik = setConstraint('parent', ikCtrl, splineIkCtrl, name)
			if(len(fkCtrl) != None):
				fk = setConstraint('parent', fkCtrl, splineIkCtrl, name)
		else:
			fk = setConstraint('parent', fkCtrl, splineIkCtrl, name)
	return(ik,fk)

def createSplineIKControls(jointsArray, masterCtrl):
	grpArray = []
	ctrlArray = []
	#create the controls
	for i in range(0, len(jointsArray), 1):
		#select only the control joints
		index = i # * divide
		#print ('index = ' + index + ';   ')
	
		copy = maya.cmds.duplicate(masterCtrl, n=(jointsArray[index] + '_CTRL'))
		group1 = maya.cmds.group(copy[0], n=(jointsArray[index] + '_AV'))
		group2 = maya.cmds.group(group1, n=(jointsArray[index] + '_NULL'))
		group3 = maya.cmds.group(group2, n=(jointsArray[index] + '_GRP'))
		grpArray.append(group3)
		ctrlArray.append(copy[0])
			
		parentConstraint = maya.cmds.pointConstraint( jointsArray[index], group3)
		maya.cmds.delete(parentConstraint[0])
		
		maya.cmds.select(copy[0])
		maya.cmds.makeIdentity( apply=True, translate=True, rotate=True, scale=True, normal=False)

	return(ctrlArray,grpArray)


def splineIKrotation(jointsArray):
	#create multiply and blend nodes 
	IKrotateMultiply = sidePrefix + 'IK_' + limbTypeName + 'rotator_multiplyDivide'
	FKrotateMultiply = sidePrefix + 'FK_' + limbTypeName + 'rotator_multiplyDivide'
	IKFKrotateBlend =  sidePrefix + 'IKFK_' + limbTypeName + 'blend'

	IKrotateArry = []
	FKrotateArry = []
	IKFKrotateArry = []

	whichAxis = ['X', 'Y', 'Z']
	whichColour = ['R', 'B', 'G']
	fraction = 1 /(len(splineIKCTRLjoints)-1)
	print('fraction = ' + str(fraction))

	for i in range(0, len(jointsArray), 1):
		multiplierNode = maya.cmds.shadingNode('multiplyDivide', n=IKrotateMultiply + '1', au=True)
		IKrotateArry.append(multiplierNode)
		multiplierNode = maya.cmds.shadingNode('multiplyDivide', n=FKrotateMultiply + '1', au=True)
		FKrotateArry.append(multiplierNode)
		multiplierNode = maya.cmds.shadingNode('multiplyDivide', n=IKFKrotateBlend + '1', au=True)
		IKFKrotateArry.append(multiplierNode)

		#Connect Multiple nodes to blend
		offset = i + 1

		brake = 0

		for j in range (0, 3, 1):

			if(brake == 0):
				IKconnector = IKrotateArry[i] + '.output' + whichAxis[j]
				FKconnector = FKrotateArry[i] + '.output' + whichAxis[j]
				IKsocket = IKFKrotateArry[i] + '.color1' + whichColour[j]
				FKsocket = IKFKrotateArry[i] + '.color2' + whichColour[j]

				maya.cmds.connectAttr(IKconnector, IKsocket, force=True)
				maya.cmds.connectAttr(FKconnector, FKsocket, force=True)

				#connect IK wrist control to Multiply nodes
				IKsocket = IKrotateArry[i] + '.input1' + whichAxis[j]
				FKsocket = FKrotateArry[i] + '.input1' + whichAxis[j]

				IKconnector = IKwristCtrl + rotationAxis
				FKconnector = FKwristCtrl + rotationAxis

				smoothStep = maya.cmds.smoothstep( 0, 1, increment)

				maya.cmds.setAttr(IKrotateArry[i] + '.input2' + whichAxis[j], smoothStep)
				maya.cmds.setAttr(FKrotateArry[i] + '.input2' + whichAxis[j], smoothStep)

				maya.cmds.connectAttr(IKconnector, IKsocket, force=True)
				maya.cmds.connectAttr(FKconnector, FKsocket, force=True)

				#increment up the suffix to conect to 'L_armTweak_AV'
				connector = IKFKrotateArry[i] + '.output' + whichColour[j]
				socket = (jointsArray[i] + '_AV') + rotationAxis
				print(str(jointsArray[i]) + '_AV;      ')

				maya.cmds.setAttr(connector, socket)

				if(count > howManyJoints):
					brake = 1

def masterSetUpSplineIK(selection,sidePrefix,jointType,limbType,limbTypeName,upAxis,jointOrientAxis,jointAimAxis,createSplineIK,howManyTweenJoints,howManySplineCtrlJoints,howManySplineSmthJoints,ikJointArray,fkJointArray,masterSplineIKCTRL):

	prefix = sidePrefix + jointType
	clustered = False

	groupSkeleton = ['char_GRP','DO_NOT_ALTER_GRP','skeleton_scale_GRP','CTRL_skeleton_GRP']
	#groupDim = ['char_GRP','DO_NOT_ALTER_GRP','dimension_GRP']
	groupCurves = ['char_GRP','DO_NOT_ALTER_GRP','curves_GRP']
	groupHandles = ['char_GRP','DO_NOT_ALTER_GRP','handles_GRP',sidePrefix + jointType + limbTypeName + 'cluster_GRP']
	skeletonCtrlGrp = groupSkeleton[3]
	startJoint = selection[0]
	midJoint = selection[1]
	endJoint = selection[2]
	toeJoint = None

	if(len(selection) > 2):
		toeJoint = selection[3]
		print('toeJoint = ' + str(toeJoint))

	maya.cmds.select(selection[0])
	maya.cmds.select(hierarchy = True)
	selHi = maya.cmds.ls(selection = True)
	selectedJoints = filterSelection2(selHi,endJoint,1)
	print('selectedJoints = ' + str(selectedJoints))
	
	maya.cmds.select(clear=True)
	setUpGrp(groupSkeleton)
	splineIKCTRLjoints = selectedJoints
	print('splineIKCTRLjoints = ' + str(splineIKCTRLjoints))

	
	ej = endJoint
	print('ej = ' + str(ej))
	splineIKjointsFiltered = selectedJoints
	print('splineIKjointsFiltered = ' + str(splineIKjointsFiltered))
	print('howManySplineSmthJoints = ' + str(howManySplineSmthJoints))
	print('howManySplineCtrlJoints = ' + str(howManySplineCtrlJoints))
	print('howManyTweenJoints = ' + str(howManyTweenJoints))
	insertSplineIkJoints = insertHowManySplineIKJoints(howManyTweenJoints,howManySplineCtrlJoints,howManySplineSmthJoints)
	print('insertSplineIkJoints = ' + str(insertSplineIkJoints))
	insertedCtrlJoints = insertExtraJoints06(splineIKjointsFiltered,howManySplineCtrlJoints,sidePrefix,'','',jointAimAxis,jointOrientAxis)
	print('insertedCtrlJoints = ' + str(insertedCtrlJoints))
	splineIKCtrlJoints = insertedCtrlJoints[1]
	print('splineIKCtrlJoints = ' + str(splineIKCtrlJoints))
	splineIKjoints = insertedCtrlJoints[1]
	print('splineIKjoints = ' + str(splineIKjoints))
	splineConstraints = []
	constraintType = None
	if(createSplineIK == True):
		insertedSmthjoints = insertExtraJoints06(splineIKjoints,howManySplineSmthJoints,sidePrefix,'','_s',jointAimAxis,jointOrientAxis)
		print('insertedSmthjoints = ' + str(insertedSmthjoints))
		splineIKsmthJoints = insertedSmthjoints[0]
		print('splineIKCtrlJoints = ' + str(splineIKCtrlJoints))
		splineIKjoints = insertedSmthjoints[1]
		print('splineIKjoints = ' + str(splineIKjoints))
		setUpGrp(groupHandles)
		setUpGrp(groupCurves)
		
		curve = createCurve(splineIKCtrlJoints, prefix + limbTypeName + 'curve',groupCurves[len(groupCurves)-1])
		print ('curve = ' + str(curve))
		clusters = clusterCurve(curve[0],prefix + jointType + 'CLUSTER_',groupHandles[len(groupHandles)-1])
		clustered = True

		setUpSplineIKstretch(splineIKjoints,prefix,curve[0],jointAimAxis)
		splineIK = createIKhandles2(prefix,limbType,'ikSplineSolver',splineIKjoints[0],splineIKjoints[len(splineIKjoints)-1],None,curve[0],groupHandles[2])

		splineIKcontrols = createSplineIKControls(splineIKCtrlJoints, masterSplineIKCTRL)
		print ('splineIKcontrols = ' + str(splineIKcontrols))
		print ('ikJointArray = ' + str(ikJointArray))
		print ('fkJointArray = ' + str(fkJointArray))
		for i in range(0,len(clusters),1):
			print ('splineIKcontrols[1][i] = ' + str(splineIKcontrols[1][i]))
			temp = setConstraint('point', splineIKcontrols[1][i], splineIKCtrlJoints[i], None)
			maya.cmds.delete(temp[0])
			print ('splineIKcontrols[0][i] = ' + str(splineIKcontrols[0][i]))
			setConstraint('point', splineIKcontrols[0][i], clusters[i], None)
			temp = setUpSplineIKControls(clustered, ikJointArray[i], fkJointArray[i], splineIKcontrols[1][i], None)
			splineConstraints.append(temp[0])
			constraintType = temp[1]

	else:
		splineIKcontrols = createSplineIKControls(splineIKCtrlJoints, masterSplineIKCTRL)
		for i in range(0,len(splineIKCtrlJoints),1):
			temp = setUpSplineIKControls(clustered, ikJointArray[i], fkJointArray[i], splineIKCtrlJoints[i], None)
			splineConstraints.append(temp[0])
			constraintType = temp[1]

	
	
#### END  - SplineIK ####################################################################################################################################################################################

def editTxtGrpButton(name,type):
	item = maya.cmds.ls(selection=True)
	if(len(item) == 1):
		if(type == 'textFieldButtonGrp'):
			maya.cmds.textFieldButtonGrp( name, e=True, text=str(item[0]))
	else:
		print('ERROR :: Select one item only, current items selected : ' + str(item))

def togglesystems():
	print('togglesystems()')
	ikState = maya.cmds.checkBox(rebuildCurveWindowName + '_chckIK', q=True, value=True)
	print('ikState = ' + str(ikState))
	fkState = maya.cmds.checkBox(rebuildCurveWindowName + '_chckFK', q=True, value=True)
	print('fkState = ' + str(fkState))
	splineState = maya.cmds.checkBox(rebuildCurveWindowName + '_chckSPL', q=True, value=True)
	print('splineState = ' + str(splineState))	
	useCurve = maya.cmds.checkBoxGrp(rebuildCurveWindowName + '_useSplineCurve', q=True, value1=True )
	print('useCurve = ' + str(useCurve))

	if(fkState == False):
		maya.cmds.columnLayout('FK',  e=True, en=False)
		if(splineState == False):
			maya.cmds.checkBox(rebuildCurveWindowName + '_chckIK', e=True, ed=False, value=True)
		else:
			maya.cmds.checkBox(rebuildCurveWindowName + '_chckIK', e=True, ed=True)
	else:
		maya.cmds.checkBox(rebuildCurveWindowName + '_chckIK', e=True, ed=True)
		maya.cmds.columnLayout('FK',  e=True, en=True)
	if(splineState == False):
		maya.cmds.columnLayout('SplineIK',  e=True, en=False)
		if(ikState == False):
			maya.cmds.checkBox(rebuildCurveWindowName + '_chckFK', e=True, ed=False, value=True)
		else:
			maya.cmds.checkBox(rebuildCurveWindowName + '_chckFK', e=True, ed=True)
	else:
		maya.cmds.checkBox(rebuildCurveWindowName + '_chckFK', e=True, ed=True)
		maya.cmds.columnLayout('SplineIK',  e=True, en=True)
	if(ikState == False):
		maya.cmds.columnLayout('IK',  e=True, en=False)
		if(fkState == False):
			maya.cmds.checkBox(rebuildCurveWindowName + '_chckSPL', e=True, ed=False, value=True)
		else:
			maya.cmds.checkBox(rebuildCurveWindowName + '_chckSPL', e=True, ed=True)
	else:
		maya.cmds.checkBox(rebuildCurveWindowName + '_chckSPL', e=True, ed=True)
		maya.cmds.columnLayout('IK',  e=True, en=True)

	if(useCurve == False):
		maya.cmds.intFieldGrp(rebuildCurveWindowName + '_howwManySplineSmoothJoints', e=True, value1=0, en=False )
	else:
		maya.cmds.intFieldGrp(rebuildCurveWindowName + '_howwManySplineSmoothJoints', e=True, value1=1, en=True )
	

		

def whichAxis(value):
	axis = ['x','X']
	if(value == 2):
		axis = ['y','Y']
	elif(value == 3):
		axis = ['z','Z']
	return axis

def whichType(value):
	#'bipedLeg', 'Quadraped', 'misc'
	type = 'bipedLeg'
	if(value == 2):
		type = 'Quadraped'
	elif(value == 3):
		type = 'misc'
	return type

#Main function that is executed when the rebuild button is clicked from def rebuildCurveWindow(windowName,obj):
#It queries all the GUI inputs then assigns them to the appropriate argument in def rebuildCurve(obj,amplitudeX,amplitudeY,amplitudeZ,weightX,weightY,weightZ,overlapX,overlapY,overlapZ,count,frequency,spans,degrees,tolerance,affectStartCV,affectEndCV):
def buildIKFKSystem(windowName):

	#0=Right, 1=Left, 2=Centre, 3=Misc
	IKcolour = [4,7,24,5]
	FKColour = [13,14,17,11]
	splineIKColour = [23,30,22,28]

	print('buildIKFKsystem()')
	ikState = maya.cmds.checkBox(rebuildCurveWindowName + '_chckIK', q=True, value=True)
	print('ikState = ' + str(ikState))
	fkState = maya.cmds.checkBox(rebuildCurveWindowName + '_chckFK', q=True, value=True)
	print('fkState = ' + str(fkState))
	splineIKState = maya.cmds.checkBox(rebuildCurveWindowName + '_chckSPL', q=True, value=True)
	print('splineIKState = ' + str(splineIKState))
	jointTypePrefix = ['thigh_','shin_','temp1_','temp2']
	
	sidePrefix = maya.cmds.textFieldGrp( windowName + '_sidePrefix', q=True, text=True )
	sj = maya.cmds.textFieldButtonGrp( windowName + '_startJoint', q=True, text=True )
	mj = maya.cmds.textFieldButtonGrp( windowName + '_midJoint', q=True, text=True )
	ej = maya.cmds.textFieldButtonGrp( windowName + '_endJoint', q=True, text=True )
	tj = maya.cmds.textFieldButtonGrp( windowName + '_toeJoint', q=True, text=True )
	sel = [sj,mj,ej,tj]
	howManyJointsInserted = maya.cmds.intFieldGrp( windowName + '_howwManyJointstoInsert', q=True, value1=True )
	print('howManyJointsInserted = ' + str(howManyJointsInserted))
	JUA = maya.cmds.radioButtonGrp( windowName + '_upAxis', q=True, sl=True )
	upAxis = whichAxis(JUA)
	print('upAxis = ' + str(upAxis))
	JAA = maya.cmds.radioButtonGrp( windowName + '_jointAimAxis', q=True, sl=True )
	jointAimAxis =  whichAxis(JAA)
	print('jointAimAxis = ' + str(jointAimAxis))
	JOA = maya.cmds.radioButtonGrp( windowName + '_jointOrientAxis', q=True, sl=True )
	jointOrientAxis = whichAxis(JOA)
	print('jointOrientAxis[1] = ' + str(jointOrientAxis[1]))
	#selectedJoints = [sj,mj,ej]
	#print('selectedJoints = ' + str(selectedJoints))
	rebuildJoints = [sj,mj,ej]
	print('rebuildJoints = ' + str(rebuildJoints))
	#jointsInserted = insertExtraJoints00(selectedJoints,howManyJointsInserted,sidePrefix,jointAimAxis[0],jointOrientAxis[1])
	jointsInserted = insertExtraJoints00(rebuildJoints,jointTypePrefix,sidePrefix,jointAimAxis[0],howManyJointsInserted)

	limbTypeName = maya.cmds.textFieldGrp( windowName + '_limbTypeName', q = True, text=True )	
	lt = maya.cmds.radioButtonGrp( windowName + '_limbType',  q=True, sl=True )
	limbType =  whichType(lt)

	ikJoints = []
	fkJoints = []

	if(ikState != False):
		ik = maya.cmds.textFieldGrp( windowName + '_IK', q=True, text=True )
		print('ik = ' + str(ik))
		mainCtrl = maya.cmds.textFieldButtonGrp( windowName + '_IKmainCtrl', q=True, text=True )
		startCtrl = maya.cmds.textFieldButtonGrp( windowName + '_IKstartCTRL', q=True, text=True )
		midCtrl = maya.cmds.textFieldButtonGrp( windowName + '_IKmidCTRL', q=True, text=True )
		endCtrl = maya.cmds.textFieldButtonGrp( windowName + '_IKendCtrl', q=True, text=True )
		pvCtrl = maya.cmds.textFieldButtonGrp( windowName + '_IKpvCtrl', q=True, text=True )
	
		ikJoints = masterCreateIK(sidePrefix,ik,limbType,limbTypeName,upAxis[0],jointAimAxis[0],howManyJointsInserted,sj,mj,ej,tj,mainCtrl,startCtrl,endCtrl,pvCtrl)

	if(splineIKState != False):
		masterSplineCTRL = ''

		spl = maya.cmds.textFieldGrp( windowName + '_SPL', q=True, text=True )
		print('spl = ' + str(spl))
		useCurve = maya.cmds.checkBoxGrp( windowName + '_useSplineCurve', q=True, value1=True )
		print('useCurve = ' + str(useCurve))
		masterSplineCTRL = maya.cmds.textFieldButtonGrp( windowName + '_splineIkmasterCtrl', q=True, text=True )
		print('masterSplineCTRL = ' + str(masterSplineCTRL))
		howManySplineControlJoints = maya.cmds.intFieldGrp( windowName + '_howwManySplineControlJoints', numberOfFields=1, q=True, value1=True )
		print('howManySplineControlJoints = ' + str(howManySplineControlJoints))
		howwManySplineSmoothJoints = maya.cmds.intFieldGrp( windowName + '_howwManySplineSmoothJoints', q=True, value1=True )
		print('howwManySplineSmoothJoints = ' + str(howwManySplineSmoothJoints))

		if(masterSplineCTRL == ''):
			masterSplineCTRL = createArrowCtrl('splineIK_Master_CTRL',splineIKColour[2],'X',0.4)
			#print('masterSplineCTRL = ' + str(masterSplineCTRL))
		else:
			masterSplineCTRL = maya.cmds.textFieldButtonGrp( windowName + '_splineIkmasterCtrl', q=True, text=True )
			#print('masterSplineCTRL = ' + str(masterSplineCTRL))

		print('masterSplineCTRL = ' + str(masterSplineCTRL))
		masterSetUpSplineIK(sel,sidePrefix,spl,limbType,limbTypeName,upAxis[0],jointOrientAxis[1],jointAimAxis[0],useCurve,howManyJointsInserted,howManySplineControlJoints,howwManySplineSmoothJoints,ikJoints,fkJoints,masterSplineCTRL)






def buildIkFkWindow(windowName):
	questionButtonHeight=23
	maya.cmds.window( windowName, title= 'Build IK FK SplineIK', s=True, iconName='Short Name', widthHeight=(500, 450))
	maya.cmds.frameLayout(  windowName + '_frameLayout1', label=' ', borderStyle="in", lv=False, bv=False, mw=10, mh=10)
	maya.cmds.columnLayout(windowName + '_column1', adjustableColumn=True)

	maya.cmds.text( label= '   ' )

	maya.cmds.rowLayout(windowName + '_row1',numberOfColumns=3, columnWidth3=(80, 80, 80), adjustableColumn3=3, columnAlign3=('left','left','left'), columnAttach=[(1, 'both', 0), (2, 'both', 0), (3, 'both', 0)])
	
	maya.cmds.checkBox(windowName + '_chckIK', label='IK', value=True, cc='togglesystems()')
	maya.cmds.checkBox(windowName + '_chckFK', label='FK', value=True, cc='togglesystems()')
	maya.cmds.checkBox(windowName + '_chckSPL', label='Spline IK', value=True, cc='togglesystems()')
	maya.cmds.setParent('..')

	maya.cmds.text( label= '   ' )

	maya.cmds.frameLayout(windowName + '_formBase', label='Tabs', lv=False, labelAlign='top', borderStyle='in')
	form = maya.cmds.formLayout(windowName + '_form1')
	tabs = maya.cmds.tabLayout(windowName + '_tabs1', innerMarginWidth=5, innerMarginHeight=5)
	maya.cmds.formLayout( form, edit=True, attachForm=[(tabs, 'top', 0), (tabs, 'left', 0), (tabs, 'bottom', 0), (tabs, 'right', 0)] )
	
	maya.cmds.columnLayout('Global')
	maya.cmds.scrollLayout('Global' , width=500, height=300, horizontalScrollBarThickness=16, verticalScrollBarThickness=16)

	maya.cmds.rowLayout(windowName + '_row2',numberOfColumns=2, columnWidth2=(450, 20), adjustableColumn2=2, columnAlign2=('left','left'), columnAttach=[(1, 'both', 0), (2, 'both', 0)])
	
	maya.cmds.columnLayout(windowName + '_global1a', rs=3)
	maya.cmds.textFieldGrp( windowName + '_sidePrefix', label='Side Prefix:', text='L_' )
	sp = maya.cmds.textFieldGrp( windowName + '_sidePrefix', q=True, text=True )
	maya.cmds.textFieldGrp( windowName + '_limbTypeName', label='Limb Type Name:', text='leg_' )
	ltn = maya.cmds.textFieldGrp( windowName + '_limbTypeName', q = True, text=True )
	maya.cmds.radioButtonGrp( windowName + '_limbType', label='Type Of Limb:', labelArray3=['bipedLeg', 'Quadraped', 'misc'], numberOfRadioButtons=3, en=True, sl=1 )
	maya.cmds.radioButtonGrp( windowName + '_ctrlAimAxis', label='Control Aim Axis:', labelArray3=['x', 'y', 'z'], numberOfRadioButtons=3, en=True, sl=1 )
	maya.cmds.radioButtonGrp( windowName + '_upAxis', label='Joint Up Axis:', labelArray3=['x', 'y', 'z'], numberOfRadioButtons=3, en=True, sl=3 )
	maya.cmds.radioButtonGrp( windowName + '_jointAimAxis', label='Joint Aim Axis:', labelArray3=['x', 'y', 'z'], numberOfRadioButtons=3, en=True, sl=1 )
	maya.cmds.radioButtonGrp( windowName + '_jointOrientAxis', label='Joint Orient Axis:', labelArray3=['x', 'y', 'z'], numberOfRadioButtons=3, en=True, sl=3 )
	maya.cmds.intFieldGrp( windowName + '_howwManyJointstoInsert', numberOfFields=1, label='Number of Joints to insert:', value1=2, en=True )
	getstartJoint = sp + 'hip'
	getMidJoint = sp + 'knee'
	getEndJoint = sp + 'ankle'
	getToeJoint = sp + 'toe'
	msg = windowName + '_startJoint'
	run = 'runScript("' + windowName + '_startJoint' + '")'
	maya.cmds.textFieldButtonGrp( windowName + '_startJoint', label='Get Start Joint:', text=getstartJoint, buttonLabel='Select', en=True, bc='editTxtGrpButton("' + windowName + '_startJoint' + '","textFieldButtonGrp")' )
	maya.cmds.textFieldButtonGrp( windowName + '_midJoint', label='Get Mid Joint:', text=getMidJoint, buttonLabel='Select', en=True, bc='editTxtGrpButton("' + windowName + '_midJoint' + '","textFieldButtonGrp")' )
	maya.cmds.textFieldButtonGrp( windowName + '_endJoint', label='Get End Control:', text=getEndJoint, buttonLabel='Select', en=True, bc='editTxtGrpButton("' + windowName + '_endJoint' + '","textFieldButtonGrp")' )
	maya.cmds.textFieldButtonGrp( windowName + '_toeJoint', label='Get Toe Joint:', text=getToeJoint, buttonLabel='Select', en=True, bc='editTxtGrpButton("' + windowName + '_toeJoint' + '","textFieldButtonGrp")' )
	maya.cmds.setParent('..')

	maya.cmds.columnLayout(windowName + '_global1b', rs=3)
	maya.cmds.button(label='?', height = questionButtonHeight)
	maya.cmds.button(label='?', height = questionButtonHeight)
	maya.cmds.button(label='?', height = questionButtonHeight)
	maya.cmds.button(label='?', height = questionButtonHeight)
	maya.cmds.button(label='?', height = questionButtonHeight)
	maya.cmds.button(label='?', height = questionButtonHeight)
	maya.cmds.button(label='?', height = questionButtonHeight)
	maya.cmds.button(label='?', height = questionButtonHeight)
	maya.cmds.button(label='?', height = questionButtonHeight)
	maya.cmds.button(label='?', height = questionButtonHeight)
	maya.cmds.button(label='?', height = questionButtonHeight)
	maya.cmds.button(label='?', height = questionButtonHeight)
	maya.cmds.setParent('..')
	
	maya.cmds.setParent('..')
	maya.cmds.setParent('..')
	maya.cmds.setParent('..')

	maya.cmds.columnLayout('IK')
	maya.cmds.scrollLayout( windowName + '_scrollIK', width=500, height=300, horizontalScrollBarThickness=16, verticalScrollBarThickness=16)

	maya.cmds.rowLayout(windowName + '_row2',numberOfColumns=2, columnWidth2=(450, 20), adjustableColumn2=2, columnAlign2=('left','left'), columnAttach=[(1, 'both', 0), (2, 'both', 0)])
	
	maya.cmds.columnLayout(windowName + '_ik1a', rs=4)
	maya.cmds.textFieldGrp( windowName + '_IK', label='Joint Type:', text='IK_', en=True) 
	ik = maya.cmds.textFieldGrp( windowName + '_IK', q=True, text=True ) 
	getIkMainCtrl = sp + ik + 'foot_CTRL'
	getIkStartCtrl = sp + ik + 'hip_CTRL'
	getIkMidnCtrl = sp + ik + 'knee_CTRL'
	getIkEndCtrl = sp + ik + 'toe_CTRL'
	getIkpvCtrl = sp + ik + ltn + 'poleVector_tracking_LOC'

	maya.cmds.textFieldButtonGrp( windowName + '_IKmainCtrl', label='Get IK Main Control:', text=getIkMainCtrl, buttonLabel='Select', en=True, bc='editTxtGrpButton("' + windowName + '_IKmainCtrl' + '","textFieldButtonGrp")' )
	maya.cmds.textFieldButtonGrp( windowName + '_IKstartCTRL', label='Get IK Start Control:', text=getIkStartCtrl, buttonLabel='Select', en=True, bc='editTxtGrpButton("' + windowName + '_IKstartCTRL' + '","textFieldButtonGrp")' )
	maya.cmds.textFieldButtonGrp( windowName + '_IKmidCTRL', label='Get IK Mid Control:', text=getIkMidnCtrl, buttonLabel='Select', en=True, bc='editTxtGrpButton("' + windowName + '_IKmidCTRL' + '","textFieldButtonGrp")' )
	maya.cmds.textFieldButtonGrp( windowName + '_IKendCtrl', label='Get IK End Control:', text=getIkEndCtrl, buttonLabel='Select', en=True, bc='editTxtGrpButton("' + windowName + '_IKendCtrl' + '","textFieldButtonGrp")' )
	maya.cmds.textFieldButtonGrp( windowName + '_IKpvCtrl', label='Get IK Pole Vector Control:', text=getIkpvCtrl, buttonLabel='Select', en=True, bc='editTxtGrpButton("' + windowName + '_IKpvCtrl' + '","textFieldButtonGrp")' )
	maya.cmds.setParent('..')

	maya.cmds.columnLayout(windowName + '_ik1b', rs=5)
	maya.cmds.button(label='?', height = questionButtonHeight)
	maya.cmds.button(label='?', height = questionButtonHeight)
	maya.cmds.button(label='?', height = questionButtonHeight)
	maya.cmds.button(label='?', height = questionButtonHeight)
	maya.cmds.button(label='?', height = questionButtonHeight)
	maya.cmds.setParent('..')
	maya.cmds.setParent('..')
	maya.cmds.setParent('..')
	maya.cmds.setParent('..')

	maya.cmds.columnLayout('FK')
	maya.cmds.scrollLayout( windowName + '_scrollFK', width=500, height=300, horizontalScrollBarThickness=16, verticalScrollBarThickness=16)

	maya.cmds.rowLayout(windowName + '_row2',numberOfColumns=2, columnWidth2=(450, 20), adjustableColumn2=2, columnAlign2=('left','left'), columnAttach=[(1, 'both', 0), (2, 'both', 0)])
	
	maya.cmds.columnLayout(windowName + '_fk1a', rs=4)
	maya.cmds.textFieldGrp( windowName + '_FK', label='Joint Type:', text='FK_', en=True) 
	fk = maya.cmds.textFieldGrp( windowName + '_FK', q=True, text=True ) 
	getFkMainCtrl = sp + fk + 'foot_CTRL'
	getFkStartCtrl = sp + fk + 'hip_CTRL'
	getFkMidnCtrl = sp + fk + 'knee_CTRL'
	getFkEndCtrl = sp + fk + 'toe_CTRL'
	getFkpvCtrl = sp + fk + ltn + 'poleVector_tracking_LOC'
	maya.cmds.textFieldButtonGrp( windowName + '_FKmainCtrl', label='Get FK Main Control:', text=getFkMainCtrl, buttonLabel='Select', en=True, bc='editTxtGrpButton("' + windowName + '_FKmainCtrl' + '","textFieldButtonGrp")' )
	maya.cmds.textFieldButtonGrp( windowName + '_FKstartCTRL', label='Get FK Start Control:', text=getFkStartCtrl, buttonLabel='Select', en=True, bc='editTxtGrpButton("' + windowName + '_FKstartCTRL' + '","textFieldButtonGrp")' )
	maya.cmds.textFieldButtonGrp( windowName + '_FKmidCTRL', label='Get FK Mid Control:', text=getFkMidnCtrl, buttonLabel='Select', en=True, bc='editTxtGrpButton("' + windowName + '_FKmidCTRL' + '","textFieldButtonGrp")' )
	maya.cmds.textFieldButtonGrp( windowName + '_FKendCtrl', label='Get FK End Control:', text=getFkEndCtrl, buttonLabel='Select', en=True, bc='editTxtGrpButton("' + windowName + '_FKendCtrl' + '","textFieldButtonGrp")' )
	maya.cmds.textFieldButtonGrp( windowName + '_FKpvCtrl', label='Get FK Pole Vector Control:', text=getFkpvCtrl, buttonLabel='Select', en=True, bc='editTxtGrpButton("' + windowName + '_FKpvCtrl' + '","textFieldButtonGrp")' )
	maya.cmds.setParent('..')

	maya.cmds.columnLayout(windowName + '_fk1b', rs=6)
	maya.cmds.button(label='?', height = questionButtonHeight)
	maya.cmds.button(label='?', height = questionButtonHeight)
	maya.cmds.button(label='?', height = questionButtonHeight)
	maya.cmds.button(label='?', height = questionButtonHeight)
	maya.cmds.button(label='?', height = questionButtonHeight)
	maya.cmds.button(label='?', height = questionButtonHeight)
	maya.cmds.setParent('..')
	maya.cmds.setParent('..')
	maya.cmds.setParent('..')
	maya.cmds.setParent('..')


	maya.cmds.columnLayout('SplineIK')
	maya.cmds.scrollLayout( windowName + '_scrollSPLINE', width=500, height=300, horizontalScrollBarThickness=16, verticalScrollBarThickness=16)

	maya.cmds.rowLayout(windowName + '_row2',numberOfColumns=2, columnWidth2=(450, 20), adjustableColumn2=2, columnAlign2=('left','left'), columnAttach=[(1, 'both', 0), (2, 'both', 0)])
	
	maya.cmds.columnLayout(windowName + '_column1a', rs=4)
	maya.cmds.textFieldGrp( windowName + '_SPL', label='Joint Type:', text='SPL_', en=True) 
	spl = maya.cmds.textFieldGrp( windowName + '_SPL', q=True, text=True )
	maya.cmds.checkBoxGrp( windowName + '_useSplineCurve', numberOfCheckBoxes=1, label='Use Curve to Create IK:', value1=True, cc='togglesystems()' )
	maya.cmds.textFieldButtonGrp( windowName + '_splineIkmasterCtrl', label='Get Master Control:', text='', buttonLabel='Select', en=True, bc='editTxtGrpButton("' + windowName + '_splineIkmasterCtrl' + '","textFieldButtonGrp")' )
	maya.cmds.intFieldGrp( windowName + '_howwManySplineControlJoints', numberOfFields=1, label='Number of Control Joints:', value1=1, en=True )
	maya.cmds.intFieldGrp( windowName + '_howwManySplineSmoothJoints', numberOfFields=1, label='Number of tween Joints:', value1=1, en=True )
	maya.cmds.setParent('..')

	maya.cmds.columnLayout(windowName + '_column1b')
	maya.cmds.button(label='?')
	maya.cmds.button(label='?')
	maya.cmds.button(label='?')
	maya.cmds.button(label='?')
	maya.cmds.button(label='?')
	maya.cmds.setParent('..')
	maya.cmds.setParent('..')
	maya.cmds.setParent('..')
	maya.cmds.setParent('..')

	maya.cmds.setParent('..')
	maya.cmds.setParent('..')
	maya.cmds.setParent('..')
	
	maya.cmds.text( windowName + '_space1', label='' )
	maya.cmds.button(windowName + '_CreateSystem', label='Create IK/FK/SplineIK Systems', c='buildIKFKSystem("' + windowName + '")' )

	maya.cmds.showWindow( windowName )



rebuildCurveWindowName = 'buildIKFKsystem'
deleteWindow(rebuildCurveWindowName)
buildIkFkWindow(rebuildCurveWindowName)
